"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ava = _interopRequireDefault(require("ava"));

var yup = _interopRequireWildcard(require("yup"));

var _index = _interopRequireWildcard(require("./index"));

var _rxjs = require("rxjs");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

// clears console
// console.log('\x1Bc')

/**
 * Type validators
 */
var boolean = yup.boolean();
var number = yup.number().required().required();
var string = yup.string().strict().required();

var object = function object(x) {
  return yup.object().shape(x);
};

var array = function array(x) {
  return yup.array().of(x);
};

var oneOf = function oneOf(x) {
  return yup.mixed().oneOf(x);
};
/**
 * Pre-test
 */


var livepeer;

_ava.default.beforeEach( /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(t) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _index.default)();

          case 2:
            livepeer = _context.sent;

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
/**
 * Run tests
 */
// utils


(0, _ava.default)("should serialize profiles", function (t) {
  var a = _index.utils.serializeTranscodingProfiles(["P720p60fps16x9"]);

  var b = _index.utils.serializeTranscodingProfiles(["foo"]);

  t.is("a7ac137a", a);
  t.is("d435c53a", b);
}); // sdk snapshots

(0, _ava.default)("should initialize contracts", /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(t) {
    var _yield$initContracts, contracts, snap;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _index.initContracts)();

          case 2:
            _yield$initContracts = _context2.sent;
            contracts = _yield$initContracts.contracts;
            snap = Object.keys(contracts).reduce(function (a, b) {
              var c = _objectSpread({}, a); // constantly changes, so set to 0 for snapshot purposes


              c[b].query.rpc.idCounter = 0;
              return c;
            }, contracts); // TODO: unskip once contract schema is stable
            // t.skip.snapshot(snap)

            t.pass();

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());
(0, _ava.default)("should initialize SDK", /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(t) {
    var _yield$Livepeer, rpc;

    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _index.default)();

          case 2:
            _yield$Livepeer = _context3.sent;
            rpc = _yield$Livepeer.rpc;
            // TODO: unskip once sdk rpc is stable
            // t.skip.snapshot(rpc)
            t.pass();

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}()); // Bonding Manager

(0, _ava.default)("should get unbonding period", /*#__PURE__*/function () {
  var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(t) {
    var res;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return livepeer.rpc.getUnbondingPeriod();

          case 2:
            res = _context4.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}());
(0, _ava.default)("should get maximum earning for claims rounds", /*#__PURE__*/function () {
  var _ref5 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(t) {
    var res;
    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return livepeer.rpc.getMaxEarningsClaimsRounds();

          case 2:
            res = _context5.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}());
(0, _ava.default)("should get total bonded", /*#__PURE__*/function () {
  var _ref6 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(t) {
    var res;
    return _regenerator.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return livepeer.rpc.getTotalBonded();

          case 2:
            res = _context6.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function (_x6) {
    return _ref6.apply(this, arguments);
  };
}());
(0, _ava.default)("should get transcoder pool max size", /*#__PURE__*/function () {
  var _ref7 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(t) {
    var res;
    return _regenerator.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return livepeer.rpc.getTranscoderPoolMaxSize();

          case 2:
            res = _context7.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function (_x7) {
    return _ref7.apply(this, arguments);
  };
}()); // ENS

(0, _ava.default)("should get ENS for ETH address", /*#__PURE__*/function () {
  var _ref8 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8(t) {
    var res;
    return _regenerator.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return livepeer.rpc.getENSName("0x96b20f67309a0750b3fc3dcbe989f347167482ff");

          case 2:
            res = _context8.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function (_x8) {
    return _ref8.apply(this, arguments);
  };
}());
(0, _ava.default)("should get empty string when no ENS name address", /*#__PURE__*/function () {
  var _ref9 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9(t) {
    var res;
    return _regenerator.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return livepeer.rpc.getENSName("0x0000000000000000000000000000000000000000");

          case 2:
            res = _context9.sent;
            t.true("" === res);

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function (_x9) {
    return _ref9.apply(this, arguments);
  };
}());
(0, _ava.default)("should get ETH address for ENS name", /*#__PURE__*/function () {
  var _ref10 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10(t) {
    var res;
    return _regenerator.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return livepeer.rpc.getENSAddress("please.buymecoffee.eth");

          case 2:
            res = _context10.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function (_x10) {
    return _ref10.apply(this, arguments);
  };
}());
(0, _ava.default)("should get empty string for nonexistent ENS name", /*#__PURE__*/function () {
  var _ref11 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11(t) {
    var res;
    return _regenerator.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return livepeer.rpc.getENSAddress("donot.buymecoffee.eth");

          case 2:
            res = _context11.sent;
            t.true("" === res);

          case 4:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function (_x11) {
    return _ref11.apply(this, arguments);
  };
}()); // ETH

(0, _ava.default)("should get ETH balance", /*#__PURE__*/function () {
  var _ref12 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12(t) {
    var from, res;
    return _regenerator.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            from = livepeer.config.defaultTx.from;
            _context12.next = 3;
            return livepeer.rpc.getEthBalance(from);

          case 3:
            res = _context12.sent;
            t.true(string.isValidSync(res));

          case 5:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function (_x12) {
    return _ref12.apply(this, arguments);
  };
}()); // Minter

(0, _ava.default)("should return a number from getInflation()", /*#__PURE__*/function () {
  var _ref13 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee13(t) {
    var res;
    return _regenerator.default.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return livepeer.rpc.getInflation();

          case 2:
            res = _context13.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function (_x13) {
    return _ref13.apply(this, arguments);
  };
}());
(0, _ava.default)("should return a number from getInflationChange()", /*#__PURE__*/function () {
  var _ref14 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee14(t) {
    var res;
    return _regenerator.default.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return livepeer.rpc.getInflationChange();

          case 2:
            res = _context14.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));

  return function (_x14) {
    return _ref14.apply(this, arguments);
  };
}()); // Token

(0, _ava.default)("should return a number from getTokenTotalSupply()", /*#__PURE__*/function () {
  var _ref15 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee15(t) {
    var res;
    return _regenerator.default.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return livepeer.rpc.getTokenTotalSupply();

          case 2:
            res = _context15.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));

  return function (_x15) {
    return _ref15.apply(this, arguments);
  };
}());
(0, _ava.default)("should return a number from getTokenBalance()", /*#__PURE__*/function () {
  var _ref16 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee16(t) {
    var from, res;
    return _regenerator.default.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            from = livepeer.config.defaultTx.from;
            _context16.next = 3;
            return livepeer.rpc.getTokenBalance(from);

          case 3:
            res = _context16.sent;
            t.true(string.isValidSync(res));

          case 5:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));

  return function (_x16) {
    return _ref16.apply(this, arguments);
  };
}());
(0, _ava.default)("should return object with correct shape from getTokenInfo()", /*#__PURE__*/function () {
  var _ref17 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee17(t) {
    var schema, from, res;
    return _regenerator.default.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            schema = object({
              totalSupply: string,
              balance: string
            });
            from = livepeer.config.defaultTx.from;
            _context17.next = 4;
            return livepeer.rpc.getTokenInfo(from);

          case 4:
            res = _context17.sent;
            schema.validateSync(res);
            t.pass();

          case 7:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));

  return function (_x17) {
    return _ref17.apply(this, arguments);
  };
}()); // Faucet

(0, _ava.default)("should return object with correct shape from getFaucetInfo()", /*#__PURE__*/function () {
  var _ref18 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee18(t) {
    var schema, from, res;
    return _regenerator.default.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            schema = object({
              amount: string,
              wait: string,
              next: string
            });
            from = livepeer.config.defaultTx.from;
            _context18.next = 4;
            return livepeer.rpc.getFaucetInfo(from);

          case 4:
            res = _context18.sent;
            schema.validateSync(res);
            t.pass();

          case 7:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));

  return function (_x18) {
    return _ref18.apply(this, arguments);
  };
}()); // Block

(0, _ava.default)("should return object with correct shape from getBlock()", /*#__PURE__*/function () {
  var _ref19 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee19(t) {
    var _object;

    var schema, res;
    return _regenerator.default.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            schema = object((_object = {
              number: string,
              hash: string,
              parentHash: string,
              nonce: string,
              sha3Uncles: string,
              logsBloom: string,
              transactionsRoot: string,
              stateRoot: string,
              receiptsRoot: string,
              miner: string,
              mixHash: string,
              difficulty: string,
              totalDifficulty: string,
              extraData: string,
              size: string,
              gasLimit: string,
              gasUsed: string,
              timestamp: number,
              transactions: array(object({}))
            }, (0, _defineProperty2.default)(_object, "transactionsRoot", string), (0, _defineProperty2.default)(_object, "uncles", array(string)), _object));
            _context19.next = 3;
            return livepeer.rpc.getBlock("latest");

          case 3:
            res = _context19.sent;
            schema.validateSync(res);
            t.pass();

          case 6:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));

  return function (_x19) {
    return _ref19.apply(this, arguments);
  };
}()); // Delgator

(0, _ava.default)("should return object with correct shape from getDelegator()", /*#__PURE__*/function () {
  var _ref20 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee20(t) {
    var schema, from, res;
    return _regenerator.default.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            schema = object({
              allowance: string,
              address: string,
              bondedAmount: string,
              delegateAddress: yup.string(),
              // can be empty ('')
              delegatedAmount: string,
              fees: string,
              lastClaimRound: string,
              pendingStake: string,
              pendingFees: string,
              startRound: string,
              status: oneOf(livepeer.constants.DELEGATOR_STATUS),
              withdrawAmount: string,
              withdrawRound: string,
              nextUnbondingLockId: string
            });
            from = livepeer.config.defaultTx.from;
            _context20.next = 4;
            return livepeer.rpc.getDelegator("please.buymecoffee.eth");

          case 4:
            res = _context20.sent;
            schema.validateSync(res);
            t.pass();

          case 7:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));

  return function (_x20) {
    return _ref20.apply(this, arguments);
  };
}());
(0, _ava.default)("should return object with correct shape from getDelegatorUnbondingLock()", /*#__PURE__*/function () {
  var _ref21 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee21(t) {
    var schema, from, res;
    return _regenerator.default.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            schema = object({
              id: string,
              delegator: string,
              amount: string,
              withdrawRound: string
            });
            from = livepeer.config.defaultTx.from;
            _context21.next = 4;
            return livepeer.rpc.getDelegatorUnbondingLock(from, "0");

          case 4:
            res = _context21.sent;
            schema.validateSync(res);
            t.pass();

          case 7:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));

  return function (_x21) {
    return _ref21.apply(this, arguments);
  };
}());
(0, _ava.default)("should return object with correct shape from getDelegatorUnbondingLocks()", /*#__PURE__*/function () {
  var _ref22 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee22(t) {
    var schema, from, res;
    return _regenerator.default.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            schema = array(object({
              id: string,
              delegator: string,
              amount: string,
              withdrawRound: string
            }));
            from = livepeer.config.defaultTx.from;
            _context22.next = 4;
            return livepeer.rpc.getDelegatorUnbondingLocks(from);

          case 4:
            res = _context22.sent;
            schema.validateSync(res);
            t.pass();

          case 7:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));

  return function (_x22) {
    return _ref22.apply(this, arguments);
  };
}()); // Transcoder

(0, _ava.default)("should return object with correct shape from getTranscoder()", /*#__PURE__*/function () {
  var _ref23 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee23(t) {
    var schema, from, res;
    return _regenerator.default.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            schema = object({
              address: string,
              feeShare: string,
              // %
              lastRewardRound: string,
              lastActiveStakeUpdateRound: string,
              activationRound: string,
              deactivationRound: string,
              totalStake: string,
              rewardCut: string // %

            });
            from = livepeer.config.defaultTx.from;
            _context23.next = 4;
            return livepeer.rpc.getTranscoder(from);

          case 4:
            res = _context23.sent;
            schema.validateSync(res);
            t.pass();

          case 7:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));

  return function (_x23) {
    return _ref23.apply(this, arguments);
  };
}()); // Rounds

(0, _ava.default)("should return object with correct shape from getCurrentRoundInfo()", /*#__PURE__*/function () {
  var _ref24 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee24(t) {
    var schema, from, res;
    return _regenerator.default.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            schema = object({
              id: string,
              initialized: boolean,
              startBlock: string,
              lastInitializedRound: string,
              length: string
            });
            from = livepeer.config.defaultTx.from;
            _context24.next = 4;
            return livepeer.rpc.getCurrentRoundInfo(from);

          case 4:
            res = _context24.sent;
            schema.validateSync(res);
            t.pass();

          case 7:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));

  return function (_x24) {
    return _ref24.apply(this, arguments);
  };
}()); // Protocol

(0, _ava.default)("should return object with correct shape from getProtocol()", /*#__PURE__*/function () {
  var _ref25 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee25(t) {
    var schema, res;
    return _regenerator.default.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            schema = object({
              paused: boolean,
              totalTokenSupply: string,
              totalBondedToken: string,
              targetBondingRate: string,
              transcoderPoolMaxSize: string,
              maxEarningsClaimsRounds: string
            });
            _context25.next = 3;
            return livepeer.rpc.getProtocol();

          case 3:
            res = _context25.sent;
            schema.validateSync(res);
            t.pass();

          case 6:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));

  return function (_x25) {
    return _ref25.apply(this, arguments);
  };
}()); // Minter

(0, _ava.default)("should return target bonding rate", /*#__PURE__*/function () {
  var _ref26 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee26(t) {
    var res;
    return _regenerator.default.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return livepeer.rpc.getTargetBondingRate();

          case 2:
            res = _context26.sent;
            t.true(string.isValidSync(res));

          case 4:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));

  return function (_x26) {
    return _ref26.apply(this, arguments);
  };
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,