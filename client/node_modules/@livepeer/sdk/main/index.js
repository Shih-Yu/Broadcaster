"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TRANSCODER_STATUS = exports.EMPTY_ADDRESS = exports.DELEGATOR_STATUS = exports.DEFAULTS = exports.ADDRESS_PAD = void 0;
Object.defineProperty(exports, "VIDEO_PROFILES", {
  enumerable: true,
  get: function get() {
    return _video_profiles.VIDEO_PROFILES;
  }
});
exports.VIDEO_PROFILE_ID_SIZE = void 0;
exports.default = exports.LivepeerSDK = exports.createLivepeerSDK = createLivepeerSDK;
exports.deployContract = deployContract;
exports.getContractAt = getContractAt;
exports.initContracts = initContracts;
exports.initRPC = initRPC;
exports.utils = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ethjs = _interopRequireDefault(require("ethjs"));

var _ethjsProviderSigner = _interopRequireDefault(require("ethjs-provider-signer"));

var _ethereumjsTx = _interopRequireDefault(require("ethereumjs-tx"));

var _ethjsAbi = require("ethjs-abi");

var _ethjsEns = _interopRequireDefault(require("ethjs-ens"));

var _LivepeerToken = _interopRequireDefault(require("../abis/LivepeerToken"));

var _LivepeerTokenFaucet = _interopRequireDefault(require("../abis/LivepeerTokenFaucet"));

var _Controller = _interopRequireDefault(require("../abis/Controller"));

var _RoundsManager = _interopRequireDefault(require("../abis/RoundsManager"));

var _BondingManager = _interopRequireDefault(require("../abis/BondingManager"));

var _Minter = _interopRequireDefault(require("../abis/Minter"));

var _PollCreator = _interopRequireDefault(require("../abis/PollCreator"));

var _Poll = _interopRequireDefault(require("../abis/Poll"));

var _MerkleSnapshot = _interopRequireDefault(require("../abis/MerkleSnapshot"));

var _ServiceRegistry = _interopRequireDefault(require("../abis/ServiceRegistry"));

var _TicketBroker = _interopRequireDefault(require("../abis/TicketBroker"));

var _video_profiles = require("./video_profiles.js");

var _excluded = ["ens", "events"];

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var EMPTY_ADDRESS = "0x0000000000000000000000000000000000000000";
exports.EMPTY_ADDRESS = EMPTY_ADDRESS;
var ADDRESS_PAD = "0x000000000000000000000000";
exports.ADDRESS_PAD = ADDRESS_PAD;
var VIDEO_PROFILE_ID_SIZE = 8;
exports.VIDEO_PROFILE_ID_SIZE = VIDEO_PROFILE_ID_SIZE;
var DELEGATOR_STATUS = ["Pending", "Bonded", "Unbonded", "Unbonding"];
exports.DELEGATOR_STATUS = DELEGATOR_STATUS;
DELEGATOR_STATUS.Pending = DELEGATOR_STATUS[0];
DELEGATOR_STATUS.Bonded = DELEGATOR_STATUS[1];
DELEGATOR_STATUS.Unbonded = DELEGATOR_STATUS[2];
DELEGATOR_STATUS.Unbonding = DELEGATOR_STATUS[3];
var TRANSCODER_STATUS = ["NotRegistered", "Registered"];
exports.TRANSCODER_STATUS = TRANSCODER_STATUS;
TRANSCODER_STATUS.NotRegistered = TRANSCODER_STATUS[0];
TRANSCODER_STATUS.Registered = TRANSCODER_STATUS[1];
// Defaults
var DEFAULTS = {
  controllerAddress: "0xf96d54e490317c557a967abfa5d6e33006be69b3",
  pollCreatorAddress: "0xbf824edb6b94d9b52d972d5b25bcc19b4e6e3f3c",
  provider: process.env.INFURA_ENDPOINT,
  privateKeys: {},
  // { [publicKey: string]: privateKey }
  account: "",
  artifacts: {
    LivepeerToken: _LivepeerToken.default,
    LivepeerTokenFaucet: _LivepeerTokenFaucet.default,
    Controller: _Controller.default,
    RoundsManager: _RoundsManager.default,
    BondingManager: _BondingManager.default,
    Minter: _Minter.default,
    PollCreator: _PollCreator.default,
    Poll: _Poll.default,
    MerkleSnapshot: _MerkleSnapshot.default,
    ServiceRegistry: _ServiceRegistry.default,
    TicketBroker: _TicketBroker.default
  },
  ensRegistries: {
    // Mainnet
    1: "0x314159265dd8dbb310642f98f50c066173c1259b",
    // Ropsten
    3: "0x112234455c3a32fd11230c42e7bccd4a84e02010",
    // Rinkeby
    4: "0xe7410170f87102df0055eb195163a03b7f2bff4a",
    // Arbitrum Rinkeby
    42161: "0x",
    // Arbitrum One
    421611: "0x"
  }
}; // Utils

exports.DEFAULTS = DEFAULTS;
var utils = {
  isValidAddress: function isValidAddress(x) {
    return /^0x[a-fA-F0-9]{40}$/.test(x);
  },
  resolveAddress: function () {
    var _resolveAddress = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(resolve, x) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!utils.isValidAddress(x)) {
                _context.next = 4;
                break;
              }

              _context.t0 = x;
              _context.next = 7;
              break;

            case 4:
              _context.next = 6;
              return resolve(x);

            case 6:
              _context.t0 = _context.sent;

            case 7:
              return _context.abrupt("return", _context.t0);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function resolveAddress(_x, _x2) {
      return _resolveAddress.apply(this, arguments);
    }

    return resolveAddress;
  }(),
  getMethodHash: function getMethodHash(item) {
    // const sig = `${item.name}(${item.inputs.map(x => x.type).join(',')})`
    // const hash = Eth.keccak256(sig)
    // return hash
    return (0, _ethjsAbi.encodeSignature)(item);
  },
  findAbiByName: function findAbiByName(abis, name) {
    var _abis$filter = abis.filter(function (item) {
      if (item.type !== "function") return false;
      if (item.name === name) return true;
    }),
        _abis$filter2 = (0, _slicedToArray2.default)(_abis$filter, 1),
        abi = _abis$filter2[0];

    return abi;
  },
  findAbiByHash: function findAbiByHash(abis, hash) {
    var _abis$filter3 = abis.filter(function (item) {
      if (item.type !== "function") return false;
      return (0, _ethjsAbi.encodeSignature)(item) === hash;
    }),
        _abis$filter4 = (0, _slicedToArray2.default)(_abis$filter3, 1),
        abi = _abis$filter4[0];

    return abi;
  },
  encodeMethodParams: function encodeMethodParams(abi, params) {
    return (0, _ethjsAbi.encodeMethod)(abi, params);
  },
  decodeMethodParams: function decodeMethodParams(abi, bytecode) {
    return (0, _ethjsAbi.decodeParams)(abi.inputs.map(function (x) {
      return x.name;
    }), abi.inputs.map(function (x) {
      return x.type;
    }), "0x".concat(bytecode.substr(10)), false);
  },
  decodeContractInput: function decodeContractInput(contracts, contractAddress, input) {
    for (var key in contracts) {
      var contract = contracts[key];
      if (contract.address !== contractAddress) continue;
      var hash = input.substring(0, 10);
      var abi = utils.findAbiByHash(contract.abi, hash);
      return {
        contract: key,
        method: abi.name,
        params: Object.entries(utils.decodeMethodParams(abi, input)).reduce(function (obj, _ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              k = _ref2[0],
              v = _ref2[1];

          return _objectSpread(_objectSpread({}, obj), {}, (0, _defineProperty2.default)({}, k, Array.isArray(v) ? v.map(function (_v) {
            return BN.isBN(_v) ? toString(_v) : _v;
          }) : BN.isBN(v) ? toString(v) : v));
        }, {})
      };
    }

    return {
      contract: "",
      method: "",
      params: {}
    };
  },

  /**
   * Polls for a transaction receipt
   * @ignore
   * @param {string}   txHash - the transaction hash
   * @param {Eth}      eth    - an instance of Ethjs
   * @return {Object}
   */
  getTxReceipt: function () {
    var _getTxReceipt = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(txHash, eth) {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return new Promise(function (resolve, reject) {
                setTimeout( /*#__PURE__*/function () {
                  var _pollForReceipt = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
                    var receipt;
                    return _regenerator.default.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.prev = 0;
                            _context2.next = 3;
                            return eth.getTransactionReceipt(txHash);

                          case 3:
                            receipt = _context2.sent;

                            if (!receipt) {
                              _context2.next = 21;
                              break;
                            }

                            if (!(receipt.status === "0x1")) {
                              _context2.next = 9;
                              break;
                            }

                            _context2.t0 = // success
                            resolve(receipt);
                            _context2.next = 20;
                            break;

                          case 9:
                            _context2.t1 = reject;
                            _context2.t2 = Error;
                            _context2.t3 = JSON;
                            _context2.t4 = receipt;
                            _context2.next = 15;
                            return eth.getTransactionByHash(receipt.transactionHash);

                          case 15:
                            _context2.t5 = _context2.sent;
                            _context2.t6 = {
                              receipt: _context2.t4,
                              transaction: _context2.t5
                            };
                            _context2.t7 = _context2.t3.stringify.call(_context2.t3, _context2.t6, null, 2);
                            _context2.t8 = new _context2.t2(_context2.t7);
                            _context2.t0 = (0, _context2.t1)(_context2.t8);

                          case 20:
                            return _context2.abrupt("return", _context2.t0);

                          case 21:
                            setTimeout(pollForReceipt, 300);
                            _context2.next = 27;
                            break;

                          case 24:
                            _context2.prev = 24;
                            _context2.t9 = _context2["catch"](0);
                            reject(_context2.t9);

                          case 27:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, null, [[0, 24]]);
                  }));

                  function pollForReceipt() {
                    return _pollForReceipt.apply(this, arguments);
                  }

                  return pollForReceipt;
                }(), 0);
              });

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function getTxReceipt(_x3, _x4) {
      return _getTxReceipt.apply(this, arguments);
    }

    return getTxReceipt;
  }(),

  /**
   * Parses an encoded string of transcoding options
   * @ignore
   * @param  {string} opts - transcoding options
   * @return {Object[]}
   */
  parseTranscodingOptions: function parseTranscodingOptions(opts) {
    var profiles = Object.values(_video_profiles.VIDEO_PROFILES);
    var validHashes = new Set(profiles.map(function (x) {
      return x.hash;
    }));
    var hashes = [];

    for (var i = 0; i < opts.length; i += VIDEO_PROFILE_ID_SIZE) {
      var hash = opts.slice(i, i + VIDEO_PROFILE_ID_SIZE);
      if (!validHashes.has(hash)) continue;
      hashes.push(hash);
    }

    return hashes.map(function (x) {
      return profiles.find(function (_ref3) {
        var hash = _ref3.hash;
        return x === hash;
      });
    });
  },

  /**
   * Serializes a list of transcoding profiles name into a hash
   * @ignore
   * @param  {string[]} name - transcoding profile name
   * @return {string}
   */
  serializeTranscodingProfiles: function serializeTranscodingProfiles(names) {
    return (0, _toConsumableArray2.default)(new Set( // dedupe profiles
    names.map(function (x) {
      return _video_profiles.VIDEO_PROFILES[x] ? _video_profiles.VIDEO_PROFILES[x].hash : _video_profiles.VIDEO_PROFILES.P240p30fps4x3.hash;
    }))).join("");
  },

  /**
   * Pads an address with 0s on the left (for topic encoding)
   * @ignore
   * @param  {string} addr - an ETH address
   * @return {string}
   */
  padAddress: function padAddress(addr) {
    return ADDRESS_PAD + addr.substr(2);
  },

  /**
   * Encodes an event filter object into a topic list
   * @ignore
   * @param  {Function} event   - a contract event method
   * @param  {Object}   filters - key/value map of indexed event params
   * @return {string[]}
   */
  encodeEventTopics: function encodeEventTopics(event, filters) {
    return event.abi.inputs.reduce(function (topics, _ref4, i) {
      var indexed = _ref4.indexed,
          name = _ref4.name,
          type = _ref4.type;
      if (!indexed) return topics;
      if (!filters.hasOwnProperty(name)) return [].concat((0, _toConsumableArray2.default)(topics), [null]);
      if (type === "address" && "string" === typeof filters[name]) return [].concat((0, _toConsumableArray2.default)(topics), [utils.padAddress(filters[name])]);
      return [].concat((0, _toConsumableArray2.default)(topics), [filters[name]]);
    }, [event().options.defaultFilterObject.topics[0]]);
  },

  /**
   * Turns a raw event log into a result object
   * @ignore
   * @param  {Function} event  - a contract event method
   * @param  {string}   data   - bytecode from log
   * @param  {string[]} topics - list of topics for log query
   * @return {Object}
   */
  decodeEvent: function decodeEvent(event) {
    return function (_ref5) {
      var data = _ref5.data,
          topics = _ref5.topics;
      return (0, _ethjsAbi.decodeEvent)(event.abi, data, topics, false);
    };
  }
}; // Helper functions
// ethjs returns a Result type from rpc requests
// these functions help with formatting those values

exports.utils = utils;
var BN = _ethjs.default.BN;

var toBN = function toBN(n) {
  return BN.isBN(n) ? n : new BN(n.toString(10), 10);
};

var compose = function compose() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return fns.reduce(function (f, g) {
    return function () {
      return f(g.apply(void 0, arguments));
    };
  });
};

var prop = function prop(k) {
  return function (x) {
    return x[k];
  };
};

var toBool = function toBool(x) {
  return !!x;
};

var toString = function toString(x) {
  return x.toString(10);
};

var toNumber = function toNumber(x) {
  return Number(x.toString(10));
};

var headToBool = compose(toBool, prop(0));
var headToString = compose(toString, prop(0));
var headToNumber = compose(toNumber, prop(0));

var invariant = function invariant(name, pos, type) {
  throw new Error("Missing argument \"".concat(name, "\" (").concat(type, ") at position ").concat(pos));
};

var formatDuration = function formatDuration(ms) {
  var seconds = (ms / 1000).toFixed(1);
  var minutes = (ms / (1000 * 60)).toFixed(1);
  var hours = (ms / (1000 * 60 * 60)).toFixed(1);
  var days = (ms / (1000 * 60 * 60 * 24)).toFixed(1);
  if (seconds < 60) return seconds + " sec";else if (minutes < 60) return minutes + " min";else if (hours < 24) return hours + " hours";
  return days + " days";
};
/**
 * Deploys contract and return instance at deployed address
 * @ignore
 * @param {*} eth
 * @param {*} args
 */


function deployContract(_x5, _x6) {
  return _deployContract.apply(this, arguments);
}
/**
 * Creates a contract instance from a specific address
 * @ignore
 * @param {Eth}    eth     - ethjs instance
 * @param {string} address -
 * @param {Object} args[0] - an object containing all relevant Livepeer Artifacts
 */


function _deployContract() {
  _deployContract = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(eth, _ref6) {
    var abi, bytecode, defaultTx, contract, txHash, receipt;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            abi = _ref6.abi, bytecode = _ref6.bytecode, defaultTx = _ref6.defaultTx;
            contract = eth.contract(abi, bytecode, defaultTx);
            _context4.next = 4;
            return contract.new();

          case 4:
            txHash = _context4.sent;
            _context4.next = 7;
            return eth.getTransactionSuccess(txHash);

          case 7:
            receipt = _context4.sent;
            return _context4.abrupt("return", contract.at(receipt.contractAddress));

          case 9:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _deployContract.apply(this, arguments);
}

function getContractAt(eth, _ref7) {
  var abi = _ref7.abi,
      bytecode = _ref7.bytecode,
      address = _ref7.address,
      defaultTx = _ref7.defaultTx;
  return eth.contract(abi, bytecode, defaultTx).at(address);
}
/**
 * Creates an instance of Eth and a default transaction object
 * @ignore
 * @return {{ et, gas: Eth, defaultTx: { from: string, gas: number } }}
 */


function initRPC(_x7) {
  return _initRPC.apply(this, arguments);
}
/**
 * Creates instances of all main Livepeer contracts
 * @ignore
 * @param {string} opts.provider  - the httpProvider for contract RPC
 * @param {Object} opts.artifacts - ...
 */


function _initRPC() {
  _initRPC = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(_ref8) {
    var account, privateKeys, provider, usePrivateKeys, ethjsProvider, eth, ens, _accounts, from;

    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            account = _ref8.account, privateKeys = _ref8.privateKeys, provider = _ref8.provider;
            usePrivateKeys = 0 < Object.keys(privateKeys).length;
            ethjsProvider = "object" === (0, _typeof2.default)(provider) && provider ? provider : usePrivateKeys ? // Use provider-signer to locally sign transactions
            new _ethjsProviderSigner.default(provider, {
              signTransaction: function signTransaction(rawTx, cb) {
                var tx = new _ethereumjsTx.default(rawTx);
                tx.sign(privateKeys[from]);
                cb(null, "0x" + tx.serialize().toString("hex"));
              },
              accounts: function accounts(cb) {
                return cb(null, _accounts);
              },
              timeout: 10 * 1000
            }) : // Use default signer
            new _ethjs.default.HttpProvider(provider || DEFAULTS.provider);
            eth = new _ethjs.default(ethjsProvider);
            _context5.t0 = _ethjsEns.default;
            _context5.t1 = eth.currentProvider;
            _context5.next = 8;
            return eth.net_version();

          case 8:
            _context5.t2 = _context5.sent;
            _context5.t3 = DEFAULTS.ensRegistries[_context5.t2];
            _context5.t4 = {
              provider: _context5.t1,
              registryAddress: _context5.t3
            };
            ens = new _context5.t0(_context5.t4);

            if (!usePrivateKeys) {
              _context5.next = 16;
              break;
            }

            _context5.t5 = Object.keys(privateKeys);
            _context5.next = 19;
            break;

          case 16:
            _context5.next = 18;
            return eth.accounts();

          case 18:
            _context5.t5 = _context5.sent;

          case 19:
            _accounts = _context5.t5;
            from = // select account by address or index
            // default to EMPTY_ADDRESS (read-only; cannot transact)
            _accounts.some(function (a) {
              return a.toLowerCase() === account.toLowerCase();
            }) ? account : _accounts[account] || EMPTY_ADDRESS;
            return _context5.abrupt("return", {
              eth: eth,
              ens: ens,
              provider: provider,
              accounts: _accounts,
              defaultTx: {
                from: from
              }
            });

          case 22:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _initRPC.apply(this, arguments);
}

function initContracts() {
  return _initContracts.apply(this, arguments);
}
/**
 * Livepeer SDK main module exports
 * @namespace module~exports
 */

/**
 * Livepeer SDK factory function. Creates an instance of the Livepeer SDK -- an object with useful methods for interacting with Livepeer protocol smart contracts
 * @memberof module~exports
 * @name default
 * @param {LivepeerSDKOptions} opts - SDK configuration options
 * @return {Promise<LivepeerSDK>}
 *
 * @example
 *
 * // Here we're naming the default export "LivepeerSDK"
 * import LivepeerSDK from '@livepeer/sdk'
 *
 * // Call the factory function and await its Promise
 * LivepeerSDK().then(sdk => {
 *   // Your Livepeer SDK instance is now ready to use
 * })
 *
 */


function _initContracts() {
  _initContracts = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
    var opts,
        _opts$account,
        account,
        _opts$artifacts,
        artifacts,
        _opts$controllerAddre,
        controllerAddress,
        _opts$pollCreatorAddr,
        pollCreatorAddress,
        _opts$privateKeys,
        privateKeys,
        _opts$provider,
        provider,
        _yield$initRPC,
        accounts,
        defaultTx,
        ens,
        eth,
        contracts,
        hashes,
        Controller,
        PollCreator,
        Poll,
        _i,
        _Object$keys,
        name,
        hash,
        address,
        _iterator,
        _step,
        item,
        abis,
        events,
        _args6 = arguments;

    return _regenerator.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            opts = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};
            // Merge pass options with defaults
            _opts$account = opts.account, account = _opts$account === void 0 ? DEFAULTS.account : _opts$account, _opts$artifacts = opts.artifacts, artifacts = _opts$artifacts === void 0 ? DEFAULTS.artifacts : _opts$artifacts, _opts$controllerAddre = opts.controllerAddress, controllerAddress = _opts$controllerAddre === void 0 ? DEFAULTS.controllerAddress : _opts$controllerAddre, _opts$pollCreatorAddr = opts.pollCreatorAddress, pollCreatorAddress = _opts$pollCreatorAddr === void 0 ? DEFAULTS.pollCreatorAddress : _opts$pollCreatorAddr, _opts$privateKeys = opts.privateKeys, privateKeys = _opts$privateKeys === void 0 ? DEFAULTS.privateKeys : _opts$privateKeys, _opts$provider = opts.provider, provider = _opts$provider === void 0 ? DEFAULTS.provider : _opts$provider; // Instanstiate new ethjs instance with specified provider

            _context6.next = 4;
            return initRPC({
              account: account,
              privateKeys: privateKeys,
              provider: provider
            });

          case 4:
            _yield$initRPC = _context6.sent;
            accounts = _yield$initRPC.accounts;
            defaultTx = _yield$initRPC.defaultTx;
            ens = _yield$initRPC.ens;
            eth = _yield$initRPC.eth;
            contracts = {
              LivepeerToken: null,
              LivepeerTokenFaucet: null,
              BondingManager: null,
              RoundsManager: null,
              Minter: null,
              MerkleSnapshot: null,
              ServiceRegistry: null,
              TicketBroker: null
            };
            hashes = {
              LivepeerToken: {},
              LivepeerTokenFaucet: {},
              BondingManager: {},
              RoundsManager: {},
              Minter: {},
              MerkleSnapshot: {},
              ServiceRegistry: {},
              TicketBroker: {}
            }; // Create a Controller contract instance

            _context6.next = 13;
            return getContractAt(eth, _objectSpread(_objectSpread({}, artifacts.Controller), {}, {
              defaultTx: defaultTx,
              address: controllerAddress
            }));

          case 13:
            Controller = _context6.sent;
            _context6.next = 16;
            return getContractAt(eth, _objectSpread(_objectSpread({}, artifacts.PollCreator), {}, {
              defaultTx: defaultTx,
              address: pollCreatorAddress
            }));

          case 16:
            PollCreator = _context6.sent;
            _context6.next = 19;
            return getContractAt(eth, _objectSpread(_objectSpread({}, artifacts.Poll), {}, {
              defaultTx: defaultTx,
              address: EMPTY_ADDRESS
            }));

          case 19:
            Poll = _context6.sent;
            _i = 0, _Object$keys = Object.keys(contracts);

          case 21:
            if (!(_i < _Object$keys.length)) {
              _context6.next = 35;
              break;
            }

            name = _Object$keys[_i];
            // Get contract address from Controller
            hash = _ethjs.default.keccak256(name);
            _context6.next = 26;
            return Controller.getContract(hash);

          case 26:
            address = _context6.sent[0];
            _context6.next = 29;
            return getContractAt(eth, _objectSpread(_objectSpread({}, artifacts[name]), {}, {
              defaultTx: defaultTx,
              address: address
            }));

          case 29:
            contracts[name] = _context6.sent;
            _iterator = _createForOfIteratorHelper(contracts[name].abi);

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                item = _step.value;
                hashes[name][utils.getMethodHash(item)] = item.name;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

          case 32:
            _i++;
            _context6.next = 21;
            break;

          case 35:
            // Add the Controller contract to the contracts object
            contracts.Controller = Controller; // Add the PollCreator contract to the contracts object

            contracts.PollCreator = PollCreator; // Add the PollCreator contract to the contracts object

            contracts.Poll = Poll; // Key ABIs by contract name

            abis = Object.entries(artifacts).map(function (_ref9) {
              var _ref10 = (0, _slicedToArray2.default)(_ref9, 2),
                  k = _ref10[0],
                  v = _ref10[1];

              return (0, _defineProperty2.default)({}, k, v.abi);
            }).reduce(function (a, b) {
              return _objectSpread(_objectSpread({}, a), b);
            }, {}); // Create a list of events in each contract

            events = Object.entries(abis).map(function (_ref12) {
              var _ref13 = (0, _slicedToArray2.default)(_ref12, 2),
                  contract = _ref13[0],
                  abi = _ref13[1];

              return abi.filter(function (x) {
                return x.type === "event";
              }).map(function (abi) {
                return {
                  abi: abi,
                  contract: contract,
                  event: contracts[contract][abi.name],
                  name: abi.name
                };
              });
            }).reduce(function (a, b) {
              return b.reduce(function (events, _ref14) {
                var name = _ref14.name,
                    event = _ref14.event,
                    abi = _ref14.abi,
                    contract = _ref14.contract;
                event.abi = abi;
                event.contract = contract;
                return _objectSpread(_objectSpread({}, events), {}, (0, _defineProperty2.default)({}, name, event));
              }, a);
            }, {});
            return _context6.abrupt("return", {
              abis: abis,
              accounts: accounts,
              contracts: contracts,
              defaultTx: defaultTx,
              ens: ens,
              eth: eth,
              events: events,
              hashes: hashes
            });

          case 41:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _initContracts.apply(this, arguments);
}

function createLivepeerSDK(_x8) {
  return _createLivepeerSDK.apply(this, arguments);
}

function _createLivepeerSDK() {
  _createLivepeerSDK = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee73(opts) {
    var _yield$initContracts, ens, events, config, _config$contracts, BondingManager, Controller, LivepeerToken, LivepeerTokenFaucet, RoundsManager, Minter, PollCreator, MerkleSnapshot, resolveAddress, cache, rpc;

    return _regenerator.default.wrap(function _callee73$(_context73) {
      while (1) {
        switch (_context73.prev = _context73.next) {
          case 0:
            _context73.next = 2;
            return initContracts(opts);

          case 2:
            _yield$initContracts = _context73.sent;
            ens = _yield$initContracts.ens;
            events = _yield$initContracts.events;
            config = (0, _objectWithoutProperties2.default)(_yield$initContracts, _excluded);
            _config$contracts = config.contracts, BondingManager = _config$contracts.BondingManager, Controller = _config$contracts.Controller, LivepeerToken = _config$contracts.LivepeerToken, LivepeerTokenFaucet = _config$contracts.LivepeerTokenFaucet, RoundsManager = _config$contracts.RoundsManager, Minter = _config$contracts.Minter, PollCreator = _config$contracts.PollCreator, MerkleSnapshot = _config$contracts.MerkleSnapshot;
            resolveAddress = utils.resolveAddress; // Cache

            cache = {// previous log queries are held here to improve perf
            };
            /**
             * "rpc" namespace of a Livepeer SDK instance
             * @namespace livepeer~rpc
             *
             * @example
             *
             * import LivepeerSDK from '@livepeer/sdk'
             *
             * LivepeerSDK().then(({ rpc }) => {
             *   // Here, we're destructuring the sdk to expose only its rpc namespace
             *   // Now, you you are able call rpc.<method-name>()
             *   // All rpc method yield Promises. Their usage is further explained below.
             * })
             *
             */

            rpc = {
              /**
               * Gets the ENS name for an address. This is known as a reverse lookup.
               * Unfortunately, users must explicitly set their own resolver.
               * So most of the time, this method just returns an empty string
               * More info here:
               * (https://docs.ens.domains/en/latest/userguide.html#reverse-name-resolution)
               * @memberof livepeer~rpc
               * @param {string} address - address to look up an ENS name for
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getENSName('0xd34db33f...')
               * // => string
               */
              getENSName: function getENSName(address) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
                  return _regenerator.default.wrap(function _callee7$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          _context7.prev = 0;
                          _context7.next = 3;
                          return ens.reverse(address);

                        case 3:
                          return _context7.abrupt("return", _context7.sent);

                        case 6:
                          _context7.prev = 6;
                          _context7.t0 = _context7["catch"](0);

                          // custom networks or unavailable resolvers can cause failure
                          if (_context7.t0.message !== "ENS name not defined.") {
                            console.warn("Could not get ENS name for address \"".concat(address, "\":"), _context7.t0.message);
                          } // if there's no name, we can just resolve an empty string


                          return _context7.abrupt("return", "");

                        case 10:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee7, null, [[0, 6]]);
                }))();
              },

              /**
               * Gets the address for an ENS name
               * @memberof livepeer~rpc
               * @param {string} name - ENS name to look up an address for
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getENSAddress('vitalik.eth')
               * // => string
               */
              getENSAddress: function getENSAddress(name) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {
                  return _regenerator.default.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.prev = 0;
                          _context8.next = 3;
                          return ens.lookup(name);

                        case 3:
                          return _context8.abrupt("return", _context8.sent);

                        case 6:
                          _context8.prev = 6;
                          _context8.t0 = _context8["catch"](0);

                          // custom networks or unavailable resolvers can cause failure
                          if (_context8.t0.message !== "ENS name not defined.") {
                            console.warn("Could not get address for ENS name \"".concat(name, "\":"), _context8.t0.message);
                          } // if there's no name, we can just resolve an empty string


                          return _context8.abrupt("return", "");

                        case 10:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8, null, [[0, 6]]);
                }))();
              },

              /**
               * Gets a block by number, hash, or keyword ('earliest' | 'latest')
               * @memberof livepeer~rpc
               * @param {string} block - Number of block to get
               *
               * @example
               *
               * await rpc.getBlock('latest')
               * // => {
               *   "number": string,
               *   "hash": string,
               *   "parentHash": string,
               *   "nonce": string,
               *   "sha3Uncles": string,
               *   "logsBloom": string,
               *   "transactionsRoot": string,
               *   "stateRoot": string,
               *   "receiptsRoot": string,
               *   "miner": string,
               *   "mixHash": string,
               *   "difficulty": string,
               *   "totalDifficulty": string,
               *   "extraData": string,
               *   "size": string,
               *   "gasLimit": string,
               *   "gasUsed": string,
               *   "timestamp": number,
               *   "transactions": Array<Transaction>,
               *   "transactionsRoot": string,
               *   "uncles": Array<Uncle>,
               * }
               */
              getBlock: function getBlock(id) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {
                  var block;
                  return _regenerator.default.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          if (!id.toString().startsWith("0x")) {
                            _context9.next = 6;
                            break;
                          }

                          _context9.next = 3;
                          return config.eth.getBlockByHash(id, true);

                        case 3:
                          _context9.t0 = _context9.sent;
                          _context9.next = 9;
                          break;

                        case 6:
                          _context9.next = 8;
                          return config.eth.getBlockByNumber(id, true);

                        case 8:
                          _context9.t0 = _context9.sent;

                        case 9:
                          block = _context9.t0;
                          return _context9.abrupt("return", _objectSpread(_objectSpread({}, block), {}, {
                            difficulty: toString(block.difficulty),
                            gasLimit: toString(block.gasLimit),
                            gasUsed: toString(block.gasUsed),
                            number: toString(block.number),
                            size: toString(block.size),
                            timestamp: Number(toString(block.timestamp)),
                            totalDifficulty: toString(block.totalDifficulty)
                          }));

                        case 11:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }))();
              },

              /**
               * Gets the ETH balance for an account
               * @memberof livepeer~rpc
               * @param {string} addr - ETH account address
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getEthBalance('0xf00...')
               * // => string
               *
               */
              getEthBalance: function getEthBalance(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {
                  return _regenerator.default.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          _context10.t0 = toString;
                          _context10.t1 = config.eth;
                          _context10.next = 4;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 4:
                          _context10.t2 = _context10.sent;
                          _context10.next = 7;
                          return _context10.t1.getBalance.call(_context10.t1, _context10.t2);

                        case 7:
                          _context10.t3 = _context10.sent;
                          return _context10.abrupt("return", (0, _context10.t0)(_context10.t3));

                        case 9:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10);
                }))();
              },

              /**
               * Gets the unbonding period for transcoders
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getUnbondingPeriod()
               * // => string
               */
              getUnbondingPeriod: function getUnbondingPeriod() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {
                  return _regenerator.default.wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _context11.t0 = headToString;
                          _context11.next = 3;
                          return BondingManager.unbondingPeriod();

                        case 3:
                          _context11.t1 = _context11.sent;
                          return _context11.abrupt("return", (0, _context11.t0)(_context11.t1));

                        case 5:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))();
              },

              /**
               * Gets the number of active transcoders
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getNumActiveTranscoders()
               * // => string
               */
              getNumActiveTranscoders: function getNumActiveTranscoders() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {
                  return _regenerator.default.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          _context12.t0 = headToString;
                          _context12.next = 3;
                          return BondingManager.numActiveTranscoders();

                        case 3:
                          _context12.t1 = _context12.sent;
                          return _context12.abrupt("return", (0, _context12.t0)(_context12.t1));

                        case 5:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee12);
                }))();
              },

              /**
               * Gets the maximum earnings for claims rounds
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getMaxEarningsClaimsRounds()
               * // => string
               */
              getMaxEarningsClaimsRounds: function getMaxEarningsClaimsRounds() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee13() {
                  return _regenerator.default.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          _context13.t0 = headToString;
                          _context13.next = 3;
                          return BondingManager.maxEarningsClaimsRounds();

                        case 3:
                          _context13.t1 = _context13.sent;
                          return _context13.abrupt("return", (0, _context13.t0)(_context13.t1));

                        case 5:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13);
                }))();
              },

              /**
               * Gets the total amount of bonded tokens
               * @memberof livepeer~rpc
               * @return {Promise<string}
               *
               * @example
               *
               * await rpc.getTotalBonded()
               * // => string
               */
              getTotalBonded: function getTotalBonded() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee14() {
                  return _regenerator.default.wrap(function _callee14$(_context14) {
                    while (1) {
                      switch (_context14.prev = _context14.next) {
                        case 0:
                          _context14.t0 = headToString;
                          _context14.next = 3;
                          return BondingManager.getTotalBonded();

                        case 3:
                          _context14.t1 = _context14.sent;
                          return _context14.abrupt("return", (0, _context14.t0)(_context14.t1));

                        case 5:
                        case "end":
                          return _context14.stop();
                      }
                    }
                  }, _callee14);
                }))();
              },

              /**
               * Gets the total supply of token (LTPU) available in the protocol
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getTokenTotalSupply()
               * // => string
               */
              getTokenTotalSupply: function getTokenTotalSupply() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee15() {
                  return _regenerator.default.wrap(function _callee15$(_context15) {
                    while (1) {
                      switch (_context15.prev = _context15.next) {
                        case 0:
                          _context15.t0 = headToString;
                          _context15.next = 3;
                          return LivepeerToken.totalSupply();

                        case 3:
                          _context15.t1 = _context15.sent;
                          return _context15.abrupt("return", (0, _context15.t0)(_context15.t1));

                        case 5:
                        case "end":
                          return _context15.stop();
                      }
                    }
                  }, _callee15);
                }))();
              },

              /**
               * Gets a user's token balance (LPTU)
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getTokenBalance('0xf00...')
               * // => string
               */
              getTokenBalance: function getTokenBalance(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee16() {
                  return _regenerator.default.wrap(function _callee16$(_context16) {
                    while (1) {
                      switch (_context16.prev = _context16.next) {
                        case 0:
                          _context16.t0 = headToString;
                          _context16.t1 = LivepeerToken;
                          _context16.next = 4;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 4:
                          _context16.t2 = _context16.sent;
                          _context16.next = 7;
                          return _context16.t1.balanceOf.call(_context16.t1, _context16.t2);

                        case 7:
                          _context16.t3 = _context16.sent;
                          return _context16.abrupt("return", (0, _context16.t0)(_context16.t3));

                        case 9:
                        case "end":
                          return _context16.stop();
                      }
                    }
                  }, _callee16);
                }))();
              },

              /**
               * Gets general information about tokens
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<TokenInfo>}
               *
               * @example
               *
               * await rpc.getTokenInfo()
               * // => TokenInfo { totalSupply: string, balance: string }
               */
              getTokenInfo: function getTokenInfo(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee17() {
                  return _regenerator.default.wrap(function _callee17$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          _context17.next = 2;
                          return rpc.getTokenTotalSupply();

                        case 2:
                          _context17.t0 = _context17.sent;
                          _context17.t1 = rpc;
                          _context17.next = 6;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 6:
                          _context17.t2 = _context17.sent;
                          _context17.next = 9;
                          return _context17.t1.getTokenBalance.call(_context17.t1, _context17.t2);

                        case 9:
                          _context17.t3 = _context17.sent;
                          return _context17.abrupt("return", {
                            totalSupply: _context17.t0,
                            balance: _context17.t3
                          });

                        case 11:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee17);
                }))();
              },

              /**
               * Transfers tokens (LPTU) from one account to another
               * @memberof livepeer~rpc
               * @param {string} to - the account ETH address to send tokens to
               * @param {string} amount - the amount of token to send (LPTU)
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.transferToken('0xf00...', '10')
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              transferToken: function transferToken(to, amount) {
                var _arguments = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee18() {
                  var tx, value, balance;
                  return _regenerator.default.wrap(function _callee18$(_context18) {
                    while (1) {
                      switch (_context18.prev = _context18.next) {
                        case 0:
                          tx = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : config.defaultTx;
                          value = toBN(amount); // make sure balance is higher than transfer

                          _context18.next = 4;
                          return LivepeerToken.balanceOf(tx.from);

                        case 4:
                          balance = _context18.sent[0];

                          if (balance.gte(value)) {
                            _context18.next = 7;
                            break;
                          }

                          throw new Error("Cannot transfer ".concat(toString(value), " LPT because is it greater than your current balance (").concat(balance, " LPT)."));

                        case 7:
                          _context18.t0 = utils;
                          _context18.t1 = LivepeerToken;
                          _context18.next = 11;
                          return resolveAddress(rpc.getENSAddress, to);

                        case 11:
                          _context18.t2 = _context18.sent;
                          _context18.t3 = value;
                          _context18.t4 = tx;
                          _context18.next = 16;
                          return _context18.t1.transfer.call(_context18.t1, _context18.t2, _context18.t3, _context18.t4);

                        case 16:
                          _context18.t5 = _context18.sent;
                          _context18.t6 = config.eth;
                          _context18.next = 20;
                          return _context18.t0.getTxReceipt.call(_context18.t0, _context18.t5, _context18.t6);

                        case 20:
                          return _context18.abrupt("return", _context18.sent);

                        case 21:
                        case "end":
                          return _context18.stop();
                      }
                    }
                  }, _callee18);
                }))();
              },

              /**
               * The amount of LPT the faucet distributes when tapped
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getFaucetAmount()
               * // => string
               */
              getFaucetAmount: function getFaucetAmount() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee19() {
                  return _regenerator.default.wrap(function _callee19$(_context19) {
                    while (1) {
                      switch (_context19.prev = _context19.next) {
                        case 0:
                          _context19.t0 = headToString;
                          _context19.next = 3;
                          return LivepeerTokenFaucet.requestAmount();

                        case 3:
                          _context19.t1 = _context19.sent;
                          return _context19.abrupt("return", (0, _context19.t0)(_context19.t1));

                        case 5:
                        case "end":
                          return _context19.stop();
                      }
                    }
                  }, _callee19);
                }))();
              },

              /**
               * How often an address can tap the faucet (in hours)
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getFaucetWait()
               * // => string
               */
              getFaucetWait: function getFaucetWait() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee20() {
                  return _regenerator.default.wrap(function _callee20$(_context20) {
                    while (1) {
                      switch (_context20.prev = _context20.next) {
                        case 0:
                          _context20.t0 = headToString;
                          _context20.next = 3;
                          return LivepeerTokenFaucet.requestWait();

                        case 3:
                          _context20.t1 = _context20.sent;
                          return _context20.abrupt("return", (0, _context20.t0)(_context20.t1));

                        case 5:
                        case "end":
                          return _context20.stop();
                      }
                    }
                  }, _callee20);
                }))();
              },

              /**
               * Next timestamp at which the given address will be allowed to tap the faucet
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getFaucetNext()
               * // => string
               */
              getFaucetNext: function getFaucetNext(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee21() {
                  return _regenerator.default.wrap(function _callee21$(_context21) {
                    while (1) {
                      switch (_context21.prev = _context21.next) {
                        case 0:
                          _context21.t0 = headToString;
                          _context21.t1 = LivepeerTokenFaucet;
                          _context21.next = 4;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 4:
                          _context21.t2 = _context21.sent;
                          _context21.next = 7;
                          return _context21.t1.nextValidRequest.call(_context21.t1, _context21.t2);

                        case 7:
                          _context21.t3 = _context21.sent;
                          return _context21.abrupt("return", (0, _context21.t0)(_context21.t3));

                        case 9:
                        case "end":
                          return _context21.stop();
                      }
                    }
                  }, _callee21);
                }))();
              },

              /**
               * Info about the state of the LPT faucet
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<FaucetInfo>}
               *
               * @example
               *
               * await rpc.getFaucetInfo('0xf00...')
               * // => FaucetInfo {
               * //   amount: string,
               * //   wait: string,
               * //   next: string,
               * // }
               */
              getFaucetInfo: function getFaucetInfo(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee22() {
                  return _regenerator.default.wrap(function _callee22$(_context22) {
                    while (1) {
                      switch (_context22.prev = _context22.next) {
                        case 0:
                          _context22.next = 2;
                          return rpc.getFaucetAmount();

                        case 2:
                          _context22.t0 = _context22.sent;
                          _context22.next = 5;
                          return rpc.getFaucetWait();

                        case 5:
                          _context22.t1 = _context22.sent;
                          _context22.t2 = rpc;
                          _context22.next = 9;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 9:
                          _context22.t3 = _context22.sent;
                          _context22.next = 12;
                          return _context22.t2.getFaucetNext.call(_context22.t2, _context22.t3);

                        case 12:
                          _context22.t4 = _context22.sent;
                          return _context22.abrupt("return", {
                            amount: _context22.t0,
                            wait: _context22.t1,
                            next: _context22.t4
                          });

                        case 14:
                        case "end":
                          return _context22.stop();
                      }
                    }
                  }, _callee22);
                }))();
              },

              /**
               * Gets the per round inflation rate
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getInflation()
               * // => string
               */
              getInflation: function getInflation() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee23() {
                  return _regenerator.default.wrap(function _callee23$(_context23) {
                    while (1) {
                      switch (_context23.prev = _context23.next) {
                        case 0:
                          _context23.t0 = headToString;
                          _context23.next = 3;
                          return Minter.inflation();

                        case 3:
                          _context23.t1 = _context23.sent;
                          return _context23.abrupt("return", (0, _context23.t0)(_context23.t1));

                        case 5:
                        case "end":
                          return _context23.stop();
                      }
                    }
                  }, _callee23);
                }))();
              },

              /**
               * Gets the change in inflation rate per round until the target bonding rate is achieved
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getInflationChange()
               * // => string
               */
              getInflationChange: function getInflationChange() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee24() {
                  return _regenerator.default.wrap(function _callee24$(_context24) {
                    while (1) {
                      switch (_context24.prev = _context24.next) {
                        case 0:
                          _context24.t0 = headToString;
                          _context24.next = 3;
                          return Minter.inflationChange();

                        case 3:
                          _context24.t1 = _context24.sent;
                          return _context24.abrupt("return", (0, _context24.t0)(_context24.t1));

                        case 5:
                        case "end":
                          return _context24.stop();
                      }
                    }
                  }, _callee24);
                }))();
              },

              /**
               * The delegator status of the given address
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getDelegatorStatus('0xf00...')
               * // => 'Pending' | 'Bonded' | 'Unbonded'
               */
              getDelegatorStatus: function getDelegatorStatus(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee25() {
                  var status;
                  return _regenerator.default.wrap(function _callee25$(_context25) {
                    while (1) {
                      switch (_context25.prev = _context25.next) {
                        case 0:
                          _context25.t0 = headToString;
                          _context25.t1 = BondingManager;
                          _context25.next = 4;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 4:
                          _context25.t2 = _context25.sent;
                          _context25.next = 7;
                          return _context25.t1.delegatorStatus.call(_context25.t1, _context25.t2);

                        case 7:
                          _context25.t3 = _context25.sent;
                          status = (0, _context25.t0)(_context25.t3);
                          return _context25.abrupt("return", DELEGATOR_STATUS[status]);

                        case 10:
                        case "end":
                          return _context25.stop();
                      }
                    }
                  }, _callee25);
                }))();
              },

              /**
               * General info about a delegator
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<Delegator>}
               *
               * @example
               *
               * await rpc.getDelegator('0xf00...')
               * // => Delegator {
               * //   allowance: string,
               * //   address: string,
               * //   bondedAmount: string,
               * //   delegateAddress: string,
               * //   delegateAmount: string,
               * //   fees: string,
               * //   lastClaimRound: string,
               * //   pendingFees: string,
               * //   pendingStake: string,
               * //   startRound: string,
               * //   status: 'Pending' | 'Bonded' | 'Unbonding' | 'Unbonded',
               * //   withdrawRound: string,
               * //   nextUnbondingLockId: string,
               * // }
               */
              getDelegator: function getDelegator(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee26() {
                  var address, allowance, pollCreatorAllowance, currentRound, pendingStake, pendingFees, d, bondedAmount, fees, delegateAddress, delegatedAmount, lastClaimRound, startRound, nextUnbondingLockId, unbondingLockId, _yield$rpc$getDelegat, withdrawAmount, withdrawRound, status;

                  return _regenerator.default.wrap(function _callee26$(_context26) {
                    while (1) {
                      switch (_context26.prev = _context26.next) {
                        case 0:
                          _context26.next = 2;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 2:
                          address = _context26.sent;
                          _context26.t0 = headToString;
                          _context26.next = 6;
                          return LivepeerToken.allowance(address, BondingManager.address);

                        case 6:
                          _context26.t1 = _context26.sent;
                          allowance = (0, _context26.t0)(_context26.t1);
                          _context26.t2 = headToString;
                          _context26.next = 11;
                          return LivepeerToken.allowance(address, PollCreator.address);

                        case 11:
                          _context26.t3 = _context26.sent;
                          pollCreatorAllowance = (0, _context26.t2)(_context26.t3);
                          _context26.next = 15;
                          return rpc.getCurrentRound();

                        case 15:
                          currentRound = _context26.sent;
                          _context26.t4 = headToString;
                          _context26.next = 19;
                          return BondingManager.pendingStake(address, currentRound);

                        case 19:
                          _context26.t5 = _context26.sent;
                          pendingStake = (0, _context26.t4)(_context26.t5);
                          _context26.t6 = headToString;
                          _context26.next = 24;
                          return BondingManager.pendingFees(address, currentRound);

                        case 24:
                          _context26.t7 = _context26.sent;
                          pendingFees = (0, _context26.t6)(_context26.t7);
                          _context26.next = 28;
                          return BondingManager.getDelegator(address);

                        case 28:
                          d = _context26.sent;
                          bondedAmount = toString(d.bondedAmount);
                          fees = toString(d.fees);
                          delegateAddress = d.delegateAddress === EMPTY_ADDRESS ? "" : d.delegateAddress;
                          delegatedAmount = toString(d.delegatedAmount);
                          lastClaimRound = toString(d.lastClaimRound);
                          startRound = toString(d.startRound);
                          nextUnbondingLockId = toString(d.nextUnbondingLockId);
                          unbondingLockId = toBN(nextUnbondingLockId);

                          if (unbondingLockId.cmp(new BN(0)) > 0) {
                            unbondingLockId = unbondingLockId.sub(new BN(1));
                          }

                          _context26.next = 40;
                          return rpc.getDelegatorUnbondingLock(address, toString(unbondingLockId));

                        case 40:
                          _yield$rpc$getDelegat = _context26.sent;
                          withdrawAmount = _yield$rpc$getDelegat.amount;
                          withdrawRound = _yield$rpc$getDelegat.withdrawRound;

                          if (!(withdrawRound !== "0" && toBN(currentRound).cmp(toBN(withdrawRound)) < 0)) {
                            _context26.next = 47;
                            break;
                          }

                          _context26.t8 = DELEGATOR_STATUS.Unbonding;
                          _context26.next = 50;
                          break;

                        case 47:
                          _context26.next = 49;
                          return rpc.getDelegatorStatus(address);

                        case 49:
                          _context26.t8 = _context26.sent;

                        case 50:
                          status = _context26.t8;
                          return _context26.abrupt("return", {
                            address: address,
                            allowance: allowance,
                            pollCreatorAllowance: pollCreatorAllowance,
                            bondedAmount: bondedAmount,
                            delegateAddress: delegateAddress,
                            delegatedAmount: delegatedAmount,
                            fees: fees,
                            lastClaimRound: lastClaimRound,
                            pendingFees: pendingFees,
                            pendingStake: pendingStake,
                            startRound: startRound,
                            status: status,
                            withdrawRound: withdrawRound,
                            withdrawAmount: withdrawAmount,
                            nextUnbondingLockId: nextUnbondingLockId
                          });

                        case 52:
                        case "end":
                          return _context26.stop();
                      }
                    }
                  }, _callee26);
                }))();
              },

              /**
               * Get all the unbonding locks for a delegator
               * @param {string} addr - delegator's ETH address
               * @return {Promise<Array<UnbondingLock>>}
               *
               * @example
               *
               * await rpc.getDelegatorUnbondingLocks('0xf00...')
               * // => UnbondingLock [{
               * //   id: string,
               * //   delegator: string,
               * //   amount: string,
               * //   withdrawRound: string
               * // }]
               */
              getDelegatorUnbondingLocks: function getDelegatorUnbondingLocks(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee27() {
                  var _yield$rpc$getDelegat2, nextUnbondingLockId, unbondingLockId, result, unbond;

                  return _regenerator.default.wrap(function _callee27$(_context27) {
                    while (1) {
                      switch (_context27.prev = _context27.next) {
                        case 0:
                          _context27.next = 2;
                          return rpc.getDelegator(addr);

                        case 2:
                          _yield$rpc$getDelegat2 = _context27.sent;
                          nextUnbondingLockId = _yield$rpc$getDelegat2.nextUnbondingLockId;
                          unbondingLockId = toNumber(nextUnbondingLockId);

                          if (unbondingLockId > 0) {
                            unbondingLockId -= 1;
                          }

                          result = [];

                        case 7:
                          if (!(unbondingLockId >= 0)) {
                            _context27.next = 15;
                            break;
                          }

                          _context27.next = 10;
                          return rpc.getDelegatorUnbondingLock(addr, toString(unbondingLockId));

                        case 10:
                          unbond = _context27.sent;
                          result.push(unbond);
                          unbondingLockId -= 1;
                          _context27.next = 7;
                          break;

                        case 15:
                          return _context27.abrupt("return", result);

                        case 16:
                        case "end":
                          return _context27.stop();
                      }
                    }
                  }, _callee27);
                }))();
              },

              /**
               * Get an unbonding lock for a delegator
               * @param {string} addr - delegator's ETH address
               * @param {string} unbondingLockId - unbonding lock ID
               *
               * @example
               *
               * await rpc.getDelegatorUnbondingLock('0xf00...', 1)
               * // => UnbondingLock {
               * //   id: string,
               * //   delegator: string,
               * //   amount: string,
               * //   withdrawRound: string
               * // }
               */
              getDelegatorUnbondingLock: function getDelegatorUnbondingLock(addr, unbondingLockId) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee28() {
                  var lock, amount, withdrawRound;
                  return _regenerator.default.wrap(function _callee28$(_context28) {
                    while (1) {
                      switch (_context28.prev = _context28.next) {
                        case 0:
                          _context28.next = 2;
                          return BondingManager.getDelegatorUnbondingLock(addr, unbondingLockId);

                        case 2:
                          lock = _context28.sent;
                          amount = toString(lock.amount);
                          withdrawRound = toString(lock.withdrawRound);
                          return _context28.abrupt("return", {
                            id: unbondingLockId,
                            delegator: addr,
                            amount: amount,
                            withdrawRound: withdrawRound
                          });

                        case 6:
                        case "end":
                          return _context28.stop();
                      }
                    }
                  }, _callee28);
                }))();
              },

              /**
               * Rebonds LPT from an address
               * @memberof livepeer~rpc
               * @param {number} unbondingLockId
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.rebond(0)
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              rebond: function rebond(unbondingLockId) {
                var _arguments2 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee29() {
                  var tx, txHash;
                  return _regenerator.default.wrap(function _callee29$(_context29) {
                    while (1) {
                      switch (_context29.prev = _context29.next) {
                        case 0:
                          tx = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : config.defaultTx;
                          _context29.next = 3;
                          return BondingManager.rebond(unbondingLockId, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 3:
                          txHash = _context29.sent;

                          if (!tx.returnTxHash) {
                            _context29.next = 6;
                            break;
                          }

                          return _context29.abrupt("return", txHash);

                        case 6:
                          _context29.next = 8;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 8:
                          return _context29.abrupt("return", _context29.sent);

                        case 9:
                        case "end":
                          return _context29.stop();
                      }
                    }
                  }, _callee29);
                }))();
              },

              /**
               * Rebonds LPT from an address with hint
               * @memberof livepeer~rpc
               * @param {number} unbondingLockId
               * @param {string} newPosPrev
               * @param {string} newPosNext
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.rebondWithHint(0, "0x", "0x")
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              rebondWithHint: function rebondWithHint(unbondingLockId, newPosPrev, newPosNext, tx) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee30() {
                  var txHash;
                  return _regenerator.default.wrap(function _callee30$(_context30) {
                    while (1) {
                      switch (_context30.prev = _context30.next) {
                        case 0:
                          _context30.next = 2;
                          return BondingManager.rebondWithHint(unbondingLockId, newPosPrev, newPosNext, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 2:
                          txHash = _context30.sent;

                          if (!tx.returnTxHash) {
                            _context30.next = 5;
                            break;
                          }

                          return _context30.abrupt("return", txHash);

                        case 5:
                          _context30.next = 7;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 7:
                          return _context30.abrupt("return", _context30.sent);

                        case 8:
                        case "end":
                          return _context30.stop();
                      }
                    }
                  }, _callee30);
                }))();
              },

              /**
               * Rebonds LPT from an address
               * @memberof livepeer~rpc
               * @param {string} to
               * @param {number} unbondingLockId
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.rebondFromUnbonded("0x", 1)
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              rebondFromUnbonded: function rebondFromUnbonded(to, unbondingLockId) {
                var _arguments3 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee31() {
                  var tx, txHash;
                  return _regenerator.default.wrap(function _callee31$(_context31) {
                    while (1) {
                      switch (_context31.prev = _context31.next) {
                        case 0:
                          tx = _arguments3.length > 2 && _arguments3[2] !== undefined ? _arguments3[2] : config.defaultTx;
                          _context31.next = 3;
                          return BondingManager.rebondFromUnbonded(to, unbondingLockId, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 3:
                          txHash = _context31.sent;

                          if (!tx.returnTxHash) {
                            _context31.next = 6;
                            break;
                          }

                          return _context31.abrupt("return", txHash);

                        case 6:
                          _context31.next = 8;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 8:
                          return _context31.abrupt("return", _context31.sent);

                        case 9:
                        case "end":
                          return _context31.stop();
                      }
                    }
                  }, _callee31);
                }))();
              },

              /**
               * Rebonds LPT from an address with hint
               * @memberof livepeer~rpc
               * @param {string} to
               * @param {number} unbondingLockId
               * @param {string} newPosPrev
               * @param {string} newPosNext
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.rebondFromUnbondedWithHint("0x", 1, "0x", "0x")
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              rebondFromUnbondedWithHint: function rebondFromUnbondedWithHint(to, unbondingLockId, newPosPrev, newPosNext) {
                var _arguments4 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee32() {
                  var tx, txHash;
                  return _regenerator.default.wrap(function _callee32$(_context32) {
                    while (1) {
                      switch (_context32.prev = _context32.next) {
                        case 0:
                          tx = _arguments4.length > 4 && _arguments4[4] !== undefined ? _arguments4[4] : config.defaultTx;
                          _context32.next = 3;
                          return BondingManager.rebondFromUnbondedWithHint(to, unbondingLockId, newPosPrev, newPosNext, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 3:
                          txHash = _context32.sent;

                          if (!tx.returnTxHash) {
                            _context32.next = 6;
                            break;
                          }

                          return _context32.abrupt("return", txHash);

                        case 6:
                          _context32.next = 8;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 8:
                          return _context32.abrupt("return", _context32.sent);

                        case 9:
                        case "end":
                          return _context32.stop();
                      }
                    }
                  }, _callee32);
                }))();
              },

              /**
               * Get a delegator's pending stake
               * @memberof livepeer~rpc
               * @param {string} addr - user's ETH address
               * @param {string} endRound The last round to compute pending stake from
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getPendingStake('0xf00...')
               * // => string
               */
              getPendingStake: function getPendingStake(addr, endRound) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee33() {
                  var address, currentRound;
                  return _regenerator.default.wrap(function _callee33$(_context33) {
                    while (1) {
                      switch (_context33.prev = _context33.next) {
                        case 0:
                          _context33.prev = 0;
                          _context33.next = 3;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 3:
                          address = _context33.sent;

                          if (endRound) {
                            _context33.next = 13;
                            break;
                          }

                          _context33.next = 7;
                          return rpc.getCurrentRound();

                        case 7:
                          currentRound = _context33.sent;
                          _context33.t0 = headToString;
                          _context33.next = 11;
                          return BondingManager.pendingStake(address, currentRound);

                        case 11:
                          _context33.t1 = _context33.sent;
                          return _context33.abrupt("return", (0, _context33.t0)(_context33.t1));

                        case 13:
                          _context33.t2 = headToString;
                          _context33.next = 16;
                          return BondingManager.pendingStake(address, endRound);

                        case 16:
                          _context33.t3 = _context33.sent;
                          return _context33.abrupt("return", (0, _context33.t2)(_context33.t3));

                        case 20:
                          _context33.prev = 20;
                          _context33.t4 = _context33["catch"](0);
                          _context33.t4.message = "Error: getPendingStake\n" + _context33.t4.message;
                          throw _context33.t4;

                        case 24:
                        case "end":
                          return _context33.stop();
                      }
                    }
                  }, _callee33, null, [[0, 20]]);
                }))();
              },

              /**
               * Get a delegator's pending fees
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @param  {string} endRound The last round to compute pending fees from
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getPendingFees('0xf00...')
               * // => string
               */
              getPendingFees: function getPendingFees(addr, endRound) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee34() {
                  var address, currentRound;
                  return _regenerator.default.wrap(function _callee34$(_context34) {
                    while (1) {
                      switch (_context34.prev = _context34.next) {
                        case 0:
                          _context34.prev = 0;
                          _context34.next = 3;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 3:
                          address = _context34.sent;

                          if (endRound) {
                            _context34.next = 13;
                            break;
                          }

                          _context34.next = 7;
                          return rpc.getCurrentRound();

                        case 7:
                          currentRound = _context34.sent;
                          _context34.t0 = headToString;
                          _context34.next = 11;
                          return BondingManager.pendingFees(address, currentRound);

                        case 11:
                          _context34.t1 = _context34.sent;
                          return _context34.abrupt("return", (0, _context34.t0)(_context34.t1));

                        case 13:
                          _context34.t2 = headToString;
                          _context34.next = 16;
                          return BondingManager.pendingFees(address, endRound);

                        case 16:
                          _context34.t3 = _context34.sent;
                          return _context34.abrupt("return", (0, _context34.t2)(_context34.t3));

                        case 20:
                          _context34.prev = 20;
                          _context34.t4 = _context34["catch"](0);
                          _context34.t4.message = "Error: getPendingFees\n" + _context34.t4.message;
                          throw _context34.t4;

                        case 24:
                        case "end":
                          return _context34.stop();
                      }
                    }
                  }, _callee34, null, [[0, 20]]);
                }))();
              },

              /**
               * Whether or not the transcoder is active
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<boolean>}
               *
               * @example
               *
               * await rpc.getTranscoderIsActive('0xf00...')
               * // => boolean
               */
              getTranscoderIsActive: function getTranscoderIsActive(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee35() {
                  return _regenerator.default.wrap(function _callee35$(_context35) {
                    while (1) {
                      switch (_context35.prev = _context35.next) {
                        case 0:
                          _context35.t0 = headToBool;
                          _context35.t1 = BondingManager;
                          _context35.next = 4;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 4:
                          _context35.t2 = _context35.sent;
                          _context35.next = 7;
                          return _context35.t1.isActiveTranscoder.call(_context35.t1, _context35.t2);

                        case 7:
                          _context35.t3 = _context35.sent;
                          return _context35.abrupt("return", (0, _context35.t0)(_context35.t3));

                        case 9:
                        case "end":
                          return _context35.stop();
                      }
                    }
                  }, _callee35);
                }))();
              },

              /**
               * Gets the status of a transcoder
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getTranscoderStatus('0xf00...')
               * // => 'NotRegistered' | 'Registered'
               */
              getTranscoderStatus: function getTranscoderStatus(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee36() {
                  var status;
                  return _regenerator.default.wrap(function _callee36$(_context36) {
                    while (1) {
                      switch (_context36.prev = _context36.next) {
                        case 0:
                          _context36.t0 = headToString;
                          _context36.t1 = BondingManager;
                          _context36.next = 4;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 4:
                          _context36.t2 = _context36.sent;
                          _context36.next = 7;
                          return _context36.t1.transcoderStatus.call(_context36.t1, _context36.t2);

                        case 7:
                          _context36.t3 = _context36.sent;
                          status = (0, _context36.t0)(_context36.t3);
                          return _context36.abrupt("return", TRANSCODER_STATUS[status]);

                        case 10:
                        case "end":
                          return _context36.stop();
                      }
                    }
                  }, _callee36);
                }))();
              },

              /**
               * Gets a transcoder's total stake
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getTranscoderTotalStake('0xf00...')
               * // => string
               */
              getTranscoderTotalStake: function getTranscoderTotalStake(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee37() {
                  return _regenerator.default.wrap(function _callee37$(_context37) {
                    while (1) {
                      switch (_context37.prev = _context37.next) {
                        case 0:
                          _context37.t0 = headToString;
                          _context37.t1 = BondingManager;
                          _context37.next = 4;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 4:
                          _context37.t2 = _context37.sent;
                          _context37.next = 7;
                          return _context37.t1.transcoderTotalStake.call(_context37.t1, _context37.t2);

                        case 7:
                          _context37.t3 = _context37.sent;
                          return _context37.abrupt("return", (0, _context37.t0)(_context37.t3));

                        case 9:
                        case "end":
                          return _context37.stop();
                      }
                    }
                  }, _callee37);
                }))();
              },

              /**
               * Gets a transcoder's pool max size
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getTranscoderPoolMaxSize()
               * // => string
               */
              getTranscoderPoolMaxSize: function getTranscoderPoolMaxSize() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee38() {
                  return _regenerator.default.wrap(function _callee38$(_context38) {
                    while (1) {
                      switch (_context38.prev = _context38.next) {
                        case 0:
                          _context38.t0 = headToString;
                          _context38.next = 3;
                          return BondingManager.getTranscoderPoolMaxSize();

                        case 3:
                          _context38.t1 = _context38.sent;
                          return _context38.abrupt("return", (0, _context38.t0)(_context38.t1));

                        case 5:
                        case "end":
                          return _context38.stop();
                      }
                    }
                  }, _callee38);
                }))();
              },

              /**
               * Gets info about a transcoder
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @return {Promise<Transcoder>}
               *
               * @example
               *
               * await rpc.getTranscoder('0xf00...')
               * // => Transcoder {
               * //   active: boolean,
               * //   address: string,
               * //   rewardCut: string,
               * //   feeShare: string,
               * //   lastRewardRound: string,
               * //   pendingRewardCut string,
               * //   pendingFeeShare: string,
               * //   pendingPricePerSegment: string,
               * //   pricePerSegment: string,
               * //   status: 'NotRegistered' | 'Registered',
               * //   totalStake: string,
               * // }
               */
              getTranscoder: function getTranscoder(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee39() {
                  var address, totalStake, t, feeShare, lastRewardRound, rewardCut, activationRound, deactivationRound, lastActiveStakeUpdateRound;
                  return _regenerator.default.wrap(function _callee39$(_context39) {
                    while (1) {
                      switch (_context39.prev = _context39.next) {
                        case 0:
                          _context39.next = 2;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 2:
                          address = _context39.sent;
                          _context39.next = 5;
                          return rpc.getTranscoderTotalStake(address);

                        case 5:
                          totalStake = _context39.sent;
                          _context39.next = 8;
                          return BondingManager.getTranscoder(address);

                        case 8:
                          t = _context39.sent;
                          feeShare = toString(t.feeShare);
                          lastRewardRound = toString(t.lastRewardRound);
                          rewardCut = toString(t.rewardCut);
                          activationRound = toString(t.activationRound);
                          deactivationRound = toString(t.deactivationRound);
                          lastActiveStakeUpdateRound = toString(t.lastActiveStakeUpdateRound);
                          return _context39.abrupt("return", {
                            address: address,
                            feeShare: feeShare,
                            lastRewardRound: lastRewardRound,
                            activationRound: activationRound,
                            deactivationRound: deactivationRound,
                            rewardCut: rewardCut,
                            totalStake: totalStake,
                            lastActiveStakeUpdateRound: lastActiveStakeUpdateRound
                          });

                        case 16:
                        case "end":
                          return _context39.stop();
                      }
                    }
                  }, _callee39);
                }))();
              },

              /**
               * Gets transcoders
               * @memberof livepeer~rpc
               * @return {Array<Transcoder>}
               *
               * @example
               *
               * await rpc.getTranscoders()
               * // => Array<Transcoder>
               */
              getTranscoders: function getTranscoders() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee40() {
                  var transcoders, addr, transcoder;
                  return _regenerator.default.wrap(function _callee40$(_context40) {
                    while (1) {
                      switch (_context40.prev = _context40.next) {
                        case 0:
                          transcoders = [];
                          _context40.t0 = headToString;
                          _context40.next = 4;
                          return BondingManager.getFirstTranscoderInPool();

                        case 4:
                          _context40.t1 = _context40.sent;
                          addr = (0, _context40.t0)(_context40.t1);

                        case 6:
                          if (!(addr !== EMPTY_ADDRESS)) {
                            _context40.next = 18;
                            break;
                          }

                          _context40.next = 9;
                          return rpc.getTranscoder(addr);

                        case 9:
                          transcoder = _context40.sent;
                          transcoders.push(transcoder);
                          _context40.t2 = headToString;
                          _context40.next = 14;
                          return BondingManager.getNextTranscoderInPool(addr);

                        case 14:
                          _context40.t3 = _context40.sent;
                          addr = (0, _context40.t2)(_context40.t3);
                          _context40.next = 6;
                          break;

                        case 18:
                          return _context40.abrupt("return", transcoders);

                        case 19:
                        case "end":
                          return _context40.stop();
                      }
                    }
                  }, _callee40);
                }))();
              },

              /**
               * Whether the protocol is paused
               * @memberof livepeer~rpc
               * @return {Promise<boolean>}
               *
               * @example
               *
               * await rpc.getProtocolPaused()
               * // => boolean
               */
              getProtocolPaused: function getProtocolPaused() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee41() {
                  return _regenerator.default.wrap(function _callee41$(_context41) {
                    while (1) {
                      switch (_context41.prev = _context41.next) {
                        case 0:
                          _context41.t0 = headToBool;
                          _context41.next = 3;
                          return Controller.paused();

                        case 3:
                          _context41.t1 = _context41.sent;
                          return _context41.abrupt("return", (0, _context41.t0)(_context41.t1));

                        case 5:
                        case "end":
                          return _context41.stop();
                      }
                    }
                  }, _callee41);
                }))();
              },

              /**
               * Gets the protocol
               * @memberof livepeer~rpc
               * @return {Promise<Protocol>}
               *
               * @example
               *
               * await rpc.getProtocol()
               * // => Protocol {
                  paused
                  totalTokenSupply
                  totalBondedToken
                  targetBondingRate
                  transcoderPoolMaxSize
                  maxEarningsClaimsRounds
               }
               */
              getProtocol: function getProtocol() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee42() {
                  var paused, totalTokenSupply, totalBondedToken, targetBondingRate, transcoderPoolMaxSize, maxEarningsClaimsRounds;
                  return _regenerator.default.wrap(function _callee42$(_context42) {
                    while (1) {
                      switch (_context42.prev = _context42.next) {
                        case 0:
                          _context42.next = 2;
                          return rpc.getProtocolPaused();

                        case 2:
                          paused = _context42.sent;
                          _context42.next = 5;
                          return rpc.getTokenTotalSupply();

                        case 5:
                          totalTokenSupply = _context42.sent;
                          _context42.next = 8;
                          return rpc.getTotalBonded();

                        case 8:
                          totalBondedToken = _context42.sent;
                          _context42.next = 11;
                          return rpc.getTargetBondingRate();

                        case 11:
                          targetBondingRate = _context42.sent;
                          _context42.next = 14;
                          return rpc.getTranscoderPoolMaxSize();

                        case 14:
                          transcoderPoolMaxSize = _context42.sent;
                          _context42.next = 17;
                          return rpc.getMaxEarningsClaimsRounds();

                        case 17:
                          maxEarningsClaimsRounds = _context42.sent;
                          return _context42.abrupt("return", {
                            paused: paused,
                            totalTokenSupply: totalTokenSupply,
                            totalBondedToken: totalBondedToken,
                            targetBondingRate: targetBondingRate,
                            transcoderPoolMaxSize: transcoderPoolMaxSize,
                            maxEarningsClaimsRounds: maxEarningsClaimsRounds
                          });

                        case 19:
                        case "end":
                          return _context42.stop();
                      }
                    }
                  }, _callee42);
                }))();
              },

              /**
               * Gets the length of a round (in blocks)
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getRoundLength()
               * // => string
               */
              getRoundLength: function getRoundLength() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee43() {
                  return _regenerator.default.wrap(function _callee43$(_context43) {
                    while (1) {
                      switch (_context43.prev = _context43.next) {
                        case 0:
                          _context43.t0 = headToString;
                          _context43.next = 3;
                          return RoundsManager.roundLength();

                        case 3:
                          _context43.t1 = _context43.sent;
                          return _context43.abrupt("return", (0, _context43.t0)(_context43.t1));

                        case 5:
                        case "end":
                          return _context43.stop();
                      }
                    }
                  }, _callee43);
                }))();
              },

              /**
               * Gets the estimated number of rounds per year
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getRoundsPerYear()
               * // => string
               */
              getRoundsPerYear: function getRoundsPerYear() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee44() {
                  return _regenerator.default.wrap(function _callee44$(_context44) {
                    while (1) {
                      switch (_context44.prev = _context44.next) {
                        case 0:
                          _context44.t0 = headToString;
                          _context44.next = 3;
                          return RoundsManager.roundsPerYear();

                        case 3:
                          _context44.t1 = _context44.sent;
                          return _context44.abrupt("return", (0, _context44.t0)(_context44.t1));

                        case 5:
                        case "end":
                          return _context44.stop();
                      }
                    }
                  }, _callee44);
                }))();
              },

              /**
               * Gets the number of the current round
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getCurrentRound()
               * // => string
               */
              getCurrentRound: function getCurrentRound() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee45() {
                  return _regenerator.default.wrap(function _callee45$(_context45) {
                    while (1) {
                      switch (_context45.prev = _context45.next) {
                        case 0:
                          _context45.t0 = headToString;
                          _context45.next = 3;
                          return RoundsManager.currentRound();

                        case 3:
                          _context45.t1 = _context45.sent;
                          return _context45.abrupt("return", (0, _context45.t0)(_context45.t1));

                        case 5:
                        case "end":
                          return _context45.stop();
                      }
                    }
                  }, _callee45);
                }))();
              },

              /**
               * Whether or not the current round is initalized
               * @memberof livepeer~rpc
               * @return {Promise<boolean>}
               *
               * @example
               *
               * await rpc.getCurrentRoundIsInitialized()
               * // => boolean
               */
              getCurrentRoundIsInitialized: function getCurrentRoundIsInitialized() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee46() {
                  return _regenerator.default.wrap(function _callee46$(_context46) {
                    while (1) {
                      switch (_context46.prev = _context46.next) {
                        case 0:
                          _context46.t0 = headToBool;
                          _context46.next = 3;
                          return RoundsManager.currentRoundInitialized();

                        case 3:
                          _context46.t1 = _context46.sent;
                          return _context46.abrupt("return", (0, _context46.t0)(_context46.t1));

                        case 5:
                        case "end":
                          return _context46.stop();
                      }
                    }
                  }, _callee46);
                }))();
              },

              /**
               * The block at which the current round started
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getCurrentRoundStartBlock()
               * // => string
               */
              getCurrentRoundStartBlock: function getCurrentRoundStartBlock() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee47() {
                  return _regenerator.default.wrap(function _callee47$(_context47) {
                    while (1) {
                      switch (_context47.prev = _context47.next) {
                        case 0:
                          _context47.t0 = headToString;
                          _context47.next = 3;
                          return RoundsManager.currentRoundStartBlock();

                        case 3:
                          _context47.t1 = _context47.sent;
                          return _context47.abrupt("return", (0, _context47.t0)(_context47.t1));

                        case 5:
                        case "end":
                          return _context47.stop();
                      }
                    }
                  }, _callee47);
                }))();
              },

              /**
               * The previously intitialized round
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getLastInitializedRound()
               * // => string
               */
              getLastInitializedRound: function getLastInitializedRound() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee48() {
                  return _regenerator.default.wrap(function _callee48$(_context48) {
                    while (1) {
                      switch (_context48.prev = _context48.next) {
                        case 0:
                          _context48.t0 = headToString;
                          _context48.next = 3;
                          return RoundsManager.lastInitializedRound();

                        case 3:
                          _context48.t1 = _context48.sent;
                          return _context48.abrupt("return", (0, _context48.t0)(_context48.t1));

                        case 5:
                        case "end":
                          return _context48.stop();
                      }
                    }
                  }, _callee48);
                }))();
              },

              /**
               * Gets general information about the rounds in the protocol
               * @memberof livepeer~rpc
               * @return {Promise<RoundInfo>}
               *
               * @example
               *
               * await rpc.getCurrentRoundInfo()
               * // => RoundInfo {
               * //   id: string,
               * //   initialized: boolean,
               * //   startBlock: string,
               * //   lastInitializedRound: string,
               * //   length: string,
               * // }
               */
              getCurrentRoundInfo: function getCurrentRoundInfo() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee49() {
                  var length, id, initialized, lastInitializedRound, startBlock;
                  return _regenerator.default.wrap(function _callee49$(_context49) {
                    while (1) {
                      switch (_context49.prev = _context49.next) {
                        case 0:
                          _context49.next = 2;
                          return rpc.getRoundLength();

                        case 2:
                          length = _context49.sent;
                          _context49.next = 5;
                          return rpc.getCurrentRound();

                        case 5:
                          id = _context49.sent;
                          _context49.next = 8;
                          return rpc.getCurrentRoundIsInitialized();

                        case 8:
                          initialized = _context49.sent;
                          _context49.next = 11;
                          return rpc.getLastInitializedRound();

                        case 11:
                          lastInitializedRound = _context49.sent;
                          _context49.next = 14;
                          return rpc.getCurrentRoundStartBlock();

                        case 14:
                          startBlock = _context49.sent;
                          return _context49.abrupt("return", {
                            id: id,
                            initialized: initialized,
                            lastInitializedRound: lastInitializedRound,
                            length: length,
                            startBlock: startBlock
                          });

                        case 16:
                        case "end":
                          return _context49.stop();
                      }
                    }
                  }, _callee49);
                }))();
              },
              getLipUpgradeRound: function getLipUpgradeRound(lipNumber) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee50() {
                  return _regenerator.default.wrap(function _callee50$(_context50) {
                    while (1) {
                      switch (_context50.prev = _context50.next) {
                        case 0:
                          _context50.next = 2;
                          return RoundsManager.lipUpgradeRound(lipNumber);

                        case 2:
                          return _context50.abrupt("return", _context50.sent[0]);

                        case 3:
                        case "end":
                          return _context50.stop();
                      }
                    }
                  }, _callee50);
                }))();
              },

              /**
               * Gets LPT from the faucet
               * @memberof livepeer~rpc
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.tapFaucet('1337')
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              tapFaucet: function tapFaucet() {
                var _arguments5 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee51() {
                  var tx;
                  return _regenerator.default.wrap(function _callee51$(_context51) {
                    while (1) {
                      switch (_context51.prev = _context51.next) {
                        case 0:
                          tx = _arguments5.length > 0 && _arguments5[0] !== undefined ? _arguments5[0] : config.defaultTx;
                          _context51.t0 = utils;
                          _context51.next = 4;
                          return LivepeerTokenFaucet.request(tx);

                        case 4:
                          _context51.t1 = _context51.sent;
                          _context51.t2 = config.eth;
                          _context51.next = 8;
                          return _context51.t0.getTxReceipt.call(_context51.t0, _context51.t1, _context51.t2);

                        case 8:
                          return _context51.abrupt("return", _context51.sent);

                        case 9:
                        case "end":
                          return _context51.stop();
                      }
                    }
                  }, _callee51);
                }))();
              },

              /**
               * Initializes the round
               * @memberof livepeer~rpc
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.initializeRound()
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              initializeRound: function initializeRound() {
                var _arguments6 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee52() {
                  var tx, txHash;
                  return _regenerator.default.wrap(function _callee52$(_context52) {
                    while (1) {
                      switch (_context52.prev = _context52.next) {
                        case 0:
                          tx = _arguments6.length > 0 && _arguments6[0] !== undefined ? _arguments6[0] : config.defaultTx;
                          _context52.prev = 1;
                          _context52.next = 4;
                          return RoundsManager.initializeRound(tx);

                        case 4:
                          txHash = _context52.sent;

                          if (!tx.returnTxHash) {
                            _context52.next = 7;
                            break;
                          }

                          return _context52.abrupt("return", txHash);

                        case 7:
                          _context52.next = 9;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 9:
                          return _context52.abrupt("return", _context52.sent);

                        case 12:
                          _context52.prev = 12;
                          _context52.t0 = _context52["catch"](1);
                          _context52.t0.message = "Error: initializeRound\n" + _context52.t0.message;
                          throw _context52.t0;

                        case 16:
                        case "end":
                          return _context52.stop();
                      }
                    }
                  }, _callee52, null, [[1, 12]]);
                }))();
              },
              approveTokenPollCreationCost: function approveTokenPollCreationCost(amount, tx) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee53() {
                  var token, txHash;
                  return _regenerator.default.wrap(function _callee53$(_context53) {
                    while (1) {
                      switch (_context53.prev = _context53.next) {
                        case 0:
                          token = toBN(amount);
                          _context53.next = 3;
                          return LivepeerToken.approve(PollCreator.address, token, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 3:
                          txHash = _context53.sent;

                          if (!tx.returnTxHash) {
                            _context53.next = 6;
                            break;
                          }

                          return _context53.abrupt("return", txHash);

                        case 6:
                          _context53.next = 8;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 8:
                          return _context53.abrupt("return", _context53.sent);

                        case 9:
                        case "end":
                          return _context53.stop();
                      }
                    }
                  }, _callee53);
                }))();
              },

              /**
               * Creates a poll
               * @memberof livepeer~rpc
               * @param {string} proposal - The IPFS multihash for the proposal
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.createPoll('Qm...')
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              createPoll: function createPoll(proposal) {
                var _arguments7 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee54() {
                  var tx, txHash;
                  return _regenerator.default.wrap(function _callee54$(_context54) {
                    while (1) {
                      switch (_context54.prev = _context54.next) {
                        case 0:
                          tx = _arguments7.length > 1 && _arguments7[1] !== undefined ? _arguments7[1] : config.defaultTx;
                          _context54.prev = 1;
                          _context54.next = 4;
                          return PollCreator.createPoll(proposal, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 4:
                          txHash = _context54.sent;

                          if (!tx.returnTxHash) {
                            _context54.next = 7;
                            break;
                          }

                          return _context54.abrupt("return", txHash);

                        case 7:
                          _context54.next = 9;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 9:
                          return _context54.abrupt("return", _context54.sent);

                        case 12:
                          _context54.prev = 12;
                          _context54.t0 = _context54["catch"](1);
                          _context54.t0.message = "Error: createPoll\n" + _context54.t0.message;
                          throw _context54.t0;

                        case 16:
                        case "end":
                          return _context54.stop();
                      }
                    }
                  }, _callee54, null, [[1, 12]]);
                }))();
              },

              /**
               * Get PollCreator transfer allowance
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.getPollCreatorAllowance('0x...')
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              getPollCreatorAllowance: function getPollCreatorAllowance(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee55() {
                  var address;
                  return _regenerator.default.wrap(function _callee55$(_context55) {
                    while (1) {
                      switch (_context55.prev = _context55.next) {
                        case 0:
                          _context55.prev = 0;
                          _context55.next = 3;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 3:
                          address = _context55.sent;
                          _context55.t0 = headToString;
                          _context55.next = 7;
                          return LivepeerToken.allowance(address, PollCreator.address);

                        case 7:
                          _context55.t1 = _context55.sent;
                          return _context55.abrupt("return", (0, _context55.t0)(_context55.t1));

                        case 11:
                          _context55.prev = 11;
                          _context55.t2 = _context55["catch"](0);
                          _context55.t2.message = "Error: getPollCreatorAllowance\n" + _context55.t2.message;
                          throw _context55.t2;

                        case 15:
                        case "end":
                          return _context55.stop();
                      }
                    }
                  }, _callee55, null, [[0, 11]]);
                }))();
              },

              /**
               * Get BondingManager transfer allowance
               * @memberof livepeer~rpc
               * @param  {string} addr - user's ETH address
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.getBondingManagerAllowance('0x...')
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              getBondingManagerAllowance: function getBondingManagerAllowance(addr) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee56() {
                  var address;
                  return _regenerator.default.wrap(function _callee56$(_context56) {
                    while (1) {
                      switch (_context56.prev = _context56.next) {
                        case 0:
                          _context56.prev = 0;
                          _context56.next = 3;
                          return resolveAddress(rpc.getENSAddress, addr);

                        case 3:
                          address = _context56.sent;
                          _context56.t0 = headToString;
                          _context56.next = 7;
                          return LivepeerToken.allowance(address, BondingManager.address);

                        case 7:
                          _context56.t1 = _context56.sent;
                          return _context56.abrupt("return", (0, _context56.t0)(_context56.t1));

                        case 11:
                          _context56.prev = 11;
                          _context56.t2 = _context56["catch"](0);
                          _context56.t2.message = "Error: getBondingManagerAllowance\n" + _context56.t2.message;
                          throw _context56.t2;

                        case 15:
                        case "end":
                          return _context56.stop();
                      }
                    }
                  }, _callee56, null, [[0, 11]]);
                }))();
              },

              /**
               * Creates a poll
               * @memberof livepeer~rpc
               * @param {string} pollAddress - poll contract address
               * @param {int} choiceId - vote (0 = yes, 1 = no)
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.initializeRound()
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              vote: function vote(pollAddress, choiceId) {
                var _arguments8 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee57() {
                  var tx, Poll, txHash;
                  return _regenerator.default.wrap(function _callee57$(_context57) {
                    while (1) {
                      switch (_context57.prev = _context57.next) {
                        case 0:
                          tx = _arguments8.length > 2 && _arguments8[2] !== undefined ? _arguments8[2] : config.defaultTx;
                          _context57.prev = 1;
                          _context57.next = 4;
                          return getContractAt(config.eth, _objectSpread(_objectSpread({}, _Poll.default), {}, {
                            defaultTx: config.defaultTx,
                            address: pollAddress
                          }));

                        case 4:
                          Poll = _context57.sent;
                          _context57.next = 7;
                          return Poll.vote(choiceId, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 7:
                          txHash = _context57.sent;

                          if (!tx.returnTxHash) {
                            _context57.next = 10;
                            break;
                          }

                          return _context57.abrupt("return", txHash);

                        case 10:
                          _context57.next = 12;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 12:
                          return _context57.abrupt("return", _context57.sent);

                        case 15:
                          _context57.prev = 15;
                          _context57.t0 = _context57["catch"](1);
                          _context57.t0.message = "Error: vote\n" + _context57.t0.message;
                          throw _context57.t0;

                        case 19:
                        case "end":
                          return _context57.stop();
                      }
                    }
                  }, _callee57, null, [[1, 15]]);
                }))();
              },

              /**
               * Claims token and eth earnings from the sender's `lastClaimRound + 1` through a given `endRound`
               * @memberof livepeer~rpc
               * @param {string} endRound - the round to claim earnings until
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {string}
               *
               * @example
               *
               * await rpc.claimEarnings()
               * // => string
               */
              claimEarnings: function claimEarnings(endRound) {
                var _arguments9 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee58() {
                  var tx;
                  return _regenerator.default.wrap(function _callee58$(_context58) {
                    while (1) {
                      switch (_context58.prev = _context58.next) {
                        case 0:
                          tx = _arguments9.length > 1 && _arguments9[1] !== undefined ? _arguments9[1] : config.defaultTx;
                          _context58.next = 3;
                          return BondingManager.claimEarnings(endRound, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 3:
                          return _context58.abrupt("return", _context58.sent);

                        case 4:
                        case "end":
                          return _context58.stop();
                      }
                    }
                  }, _callee58);
                }))();
              },
              approveTokenBondAmount: function approveTokenBondAmount(amount, tx) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee59() {
                  var token, txHash;
                  return _regenerator.default.wrap(function _callee59$(_context59) {
                    while (1) {
                      switch (_context59.prev = _context59.next) {
                        case 0:
                          token = toBN(amount);
                          _context59.next = 3;
                          return LivepeerToken.approve(BondingManager.address, token, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 3:
                          txHash = _context59.sent;

                          if (!tx.returnTxHash) {
                            _context59.next = 6;
                            break;
                          }

                          return _context59.abrupt("return", txHash);

                        case 6:
                          _context59.next = 8;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 8:
                          return _context59.abrupt("return", _context59.sent);

                        case 9:
                        case "end":
                          return _context59.stop();
                      }
                    }
                  }, _callee59);
                }))();
              },
              bondApprovedTokenAmount: function bondApprovedTokenAmount(to, amount, tx) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee60() {
                  var token, txHash;
                  return _regenerator.default.wrap(function _callee60$(_context60) {
                    while (1) {
                      switch (_context60.prev = _context60.next) {
                        case 0:
                          token = toBN(amount);
                          _context60.t0 = BondingManager;
                          _context60.t1 = token;
                          _context60.next = 5;
                          return resolveAddress(rpc.getENSAddress, to);

                        case 5:
                          _context60.t2 = _context60.sent;
                          _context60.t3 = _objectSpread(_objectSpread({}, config.defaultTx), tx);
                          _context60.next = 9;
                          return _context60.t0.bond.call(_context60.t0, _context60.t1, _context60.t2, _context60.t3);

                        case 9:
                          txHash = _context60.sent;

                          if (!tx.returnTxHash) {
                            _context60.next = 12;
                            break;
                          }

                          return _context60.abrupt("return", txHash);

                        case 12:
                          _context60.next = 14;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 14:
                          return _context60.abrupt("return", _context60.sent);

                        case 15:
                        case "end":
                          return _context60.stop();
                      }
                    }
                  }, _callee60);
                }))();
              },

              /**
               * Bonds to a transcoder with hint
               * @memberof livepeer~rpc
               * @param {string} amount
               * @param {string} to
               * @param {string} oldDelegateNewPosPrev
               * @param {string} oldDelegateNewPosNext
               * @param {string} currDelegateNewPosPrev
               * @param {string} currDelegateNewPosNext
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.bondWithHint("100", "0x", "0x", "0x", "0x", "0x")
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              bondWithHint: function bondWithHint(amount, to, oldDelegateNewPosPrev, oldDelegateNewPosNext, currDelegateNewPosPrev, currDelegateNewPosNext, tx) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee61() {
                  var token, txHash;
                  return _regenerator.default.wrap(function _callee61$(_context61) {
                    while (1) {
                      switch (_context61.prev = _context61.next) {
                        case 0:
                          token = toBN(amount);
                          _context61.t0 = BondingManager;
                          _context61.t1 = token;
                          _context61.next = 5;
                          return resolveAddress(rpc.getENSAddress, to);

                        case 5:
                          _context61.t2 = _context61.sent;
                          _context61.t3 = oldDelegateNewPosPrev;
                          _context61.t4 = oldDelegateNewPosNext;
                          _context61.t5 = currDelegateNewPosPrev;
                          _context61.t6 = currDelegateNewPosNext;
                          _context61.t7 = _objectSpread(_objectSpread({}, config.defaultTx), tx);
                          _context61.next = 13;
                          return _context61.t0.bondWithHint.call(_context61.t0, _context61.t1, _context61.t2, _context61.t3, _context61.t4, _context61.t5, _context61.t6, _context61.t7);

                        case 13:
                          txHash = _context61.sent;

                          if (!tx.returnTxHash) {
                            _context61.next = 16;
                            break;
                          }

                          return _context61.abrupt("return", txHash);

                        case 16:
                          _context61.next = 18;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 18:
                          return _context61.abrupt("return", _context61.sent);

                        case 19:
                        case "end":
                          return _context61.stop();
                      }
                    }
                  }, _callee61);
                }))();
              },

              /**
               * Gets the estimated amount of gas to be used by a smart contract
               * method.
               * @memberof livepeer~rpc
               * @param
               *  contractName: name of contract containing method you wish to find gas price for.
               *  methodName: name of method on contract.
               *  methodArgs: array of argument to be passed to the contract in specified order.
               *  tx: (optioanl){
               *    from: address - 0x...,
               *    gas: number,
               *    value: (optional) number or string containing number
               *  }
               *
               * @return {Promise<number>} containing estimated gas price
               *
               * @example
               *
               * await rpc.estimateGas(
               *  'BondingManager',
               *  'bond',
               *  [10, '0x00.....']
               * )
               * // => 33454
               */
              estimateGas: function estimateGas(contractName, methodName, methodArgs) {
                var _arguments10 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee62() {
                  var tx, gasRate, contractABI, methodABI, encodedData;
                  return _regenerator.default.wrap(function _callee62$(_context62) {
                    while (1) {
                      switch (_context62.prev = _context62.next) {
                        case 0:
                          tx = _arguments10.length > 3 && _arguments10[3] !== undefined ? _arguments10[3] : config.defaultTx;
                          tx.value = tx.value ? tx.value : "0";
                          gasRate = 1.2;
                          contractABI = config.abis[contractName];
                          methodABI = utils.findAbiByName(contractABI, methodName);
                          encodedData = utils.encodeMethodParams(methodABI, methodArgs);
                          _context62.t0 = Math;
                          _context62.t1 = toNumber;
                          _context62.next = 10;
                          return config.eth.estimateGas({
                            to: config.contracts[contractName].address,
                            from: config.defaultTx.from,
                            value: tx.value,
                            data: encodedData
                          });

                        case 10:
                          _context62.t2 = _context62.sent;
                          _context62.t3 = (0, _context62.t1)(_context62.t2);
                          _context62.t4 = gasRate;
                          _context62.t5 = _context62.t3 * _context62.t4;
                          return _context62.abrupt("return", _context62.t0.round.call(_context62.t0, _context62.t5));

                        case 15:
                        case "end":
                          return _context62.stop();
                      }
                    }
                  }, _callee62);
                }))();
              },
              getCalldata: function getCalldata(contractName, methodName, methodArgs) {
                var contractABI = config.abis[contractName];
                var methodABI = utils.findAbiByName(contractABI, methodName);
                return utils.encodeMethodParams(methodABI, methodArgs);
              },
              estimateGasRaw: function estimateGasRaw(tx) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee63() {
                  var gasRate;
                  return _regenerator.default.wrap(function _callee63$(_context63) {
                    while (1) {
                      switch (_context63.prev = _context63.next) {
                        case 0:
                          gasRate = 1.2;
                          _context63.t0 = Math;
                          _context63.t1 = toNumber;
                          _context63.next = 5;
                          return config.eth.estimateGas(_objectSpread({}, tx));

                        case 5:
                          _context63.t2 = _context63.sent;
                          _context63.t3 = (0, _context63.t1)(_context63.t2);
                          _context63.t4 = gasRate;
                          _context63.t5 = _context63.t3 * _context63.t4;
                          return _context63.abrupt("return", _context63.t0.round.call(_context63.t0, _context63.t5));

                        case 10:
                        case "end":
                          return _context63.stop();
                      }
                    }
                  }, _callee63);
                }))();
              },
              sendTransaction: function sendTransaction() {
                var _arguments11 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee64() {
                  var tx, txHash;
                  return _regenerator.default.wrap(function _callee64$(_context64) {
                    while (1) {
                      switch (_context64.prev = _context64.next) {
                        case 0:
                          tx = _arguments11.length > 0 && _arguments11[0] !== undefined ? _arguments11[0] : config.defaultTx;
                          _context64.next = 3;
                          return config.eth.sendTransaction(_objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 3:
                          txHash = _context64.sent;

                          if (!tx.returnTxHash) {
                            _context64.next = 6;
                            break;
                          }

                          return _context64.abrupt("return", txHash);

                        case 6:
                          _context64.next = 8;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 8:
                          return _context64.abrupt("return", _context64.sent);

                        case 9:
                        case "end":
                          return _context64.stop();
                      }
                    }
                  }, _callee64);
                }))();
              },

              /**
               * Unbonds LPT from an address
               * @memberof livepeer~rpc
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.unbond(amount)
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              unbond: function unbond(amount) {
                var _arguments12 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee65() {
                  var tx, txHash;
                  return _regenerator.default.wrap(function _callee65$(_context65) {
                    while (1) {
                      switch (_context65.prev = _context65.next) {
                        case 0:
                          tx = _arguments12.length > 1 && _arguments12[1] !== undefined ? _arguments12[1] : config.defaultTx;
                          _context65.next = 3;
                          return BondingManager.unbond(amount, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 3:
                          txHash = _context65.sent;

                          if (!tx.returnTxHash) {
                            _context65.next = 6;
                            break;
                          }

                          return _context65.abrupt("return", txHash);

                        case 6:
                          _context65.next = 8;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 8:
                          return _context65.abrupt("return", _context65.sent);

                        case 9:
                        case "end":
                          return _context65.stop();
                      }
                    }
                  }, _callee65);
                }))();
              },

              /**
               * Unbonds LPT from an address with hint
               * @memberof livepeer~rpc
               * @param {string} amount
               * @param {string} newPosPrev
               * @param {string} newPosNext
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.unbondWithHint("100", "0x", "0x")
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              unbondWithHint: function unbondWithHint(amount, newPosPrev, newPosNext) {
                var _arguments13 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee66() {
                  var tx, txHash;
                  return _regenerator.default.wrap(function _callee66$(_context66) {
                    while (1) {
                      switch (_context66.prev = _context66.next) {
                        case 0:
                          tx = _arguments13.length > 3 && _arguments13[3] !== undefined ? _arguments13[3] : config.defaultTx;
                          _context66.next = 3;
                          return BondingManager.unbondWithHint(amount, newPosPrev, newPosNext, _objectSpread(_objectSpread({}, config.defaultTx), tx));

                        case 3:
                          txHash = _context66.sent;

                          if (!tx.returnTxHash) {
                            _context66.next = 6;
                            break;
                          }

                          return _context66.abrupt("return", txHash);

                        case 6:
                          _context66.next = 8;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 8:
                          return _context66.abrupt("return", _context66.sent);

                        case 9:
                        case "end":
                          return _context66.stop();
                      }
                    }
                  }, _callee66);
                }))();
              },

              /**
               * Sets transcoder parameters
               * @memberof livepeer~rpc
               * @param {string} rewardCut - the block reward cut you wish to set
               * @param {string} feeShare - the fee share you wish to set
               * @param {string} pricePerSegment - the price per segment you wish to set
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {Promise<TxReceipt>}
               *
               * @example
               *
               * await rpc.setupTranscoder('10', '10', '5')
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              setupTranscoder: function setupTranscoder(rewardCut, // percentage
              feeShare, // percentage
              pricePerSegment) {
                var _arguments14 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee67() {
                  var tx;
                  return _regenerator.default.wrap(function _callee67$(_context67) {
                    while (1) {
                      switch (_context67.prev = _context67.next) {
                        case 0:
                          tx = _arguments14.length > 3 && _arguments14[3] !== undefined ? _arguments14[3] : config.defaultTx;
                          _context67.t0 = utils;
                          _context67.next = 4;
                          return BondingManager.transcoder(toBN(rewardCut), toBN(feeShare), toBN(pricePerSegment), tx);

                        case 4:
                          _context67.t1 = _context67.sent;
                          _context67.t2 = config.eth;
                          _context67.next = 8;
                          return _context67.t0.getTxReceipt.call(_context67.t0, _context67.t1, _context67.t2);

                        case 8:
                          return _context67.abrupt("return", _context67.sent);

                        case 9:
                        case "end":
                          return _context67.stop();
                      }
                    }
                  }, _callee67);
                }))();
              },

              /**
               * Get target bonding rate
               * @memberof livepeer~rpc
               * @return {Promise<string>}
               *
               * @example
               *
               * await rpc.getTargetBondingRate()
               * // => string
               */
              getTargetBondingRate: function getTargetBondingRate() {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee68() {
                  return _regenerator.default.wrap(function _callee68$(_context68) {
                    while (1) {
                      switch (_context68.prev = _context68.next) {
                        case 0:
                          _context68.t0 = headToString;
                          _context68.next = 3;
                          return Minter.targetBondingRate();

                        case 3:
                          _context68.t1 = _context68.sent;
                          return _context68.abrupt("return", (0, _context68.t0)(_context68.t1));

                        case 5:
                        case "end":
                          return _context68.stop();
                      }
                    }
                  }, _callee68);
                }))();
              },

              /**
               * Withdraws earned token (Transfers a sender's delegator `bondedAmount` to their `tokenBalance`)
               * @memberof livepeer~rpc
               * @param {string} [unbondLockId] - the unbond lock id
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {TxReceipt}
               *
               * @example
               *
               * await rpc.withdrawStake()
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              withdrawStake: function withdrawStake(unbondLockId) {
                var _arguments15 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee69() {
                  var tx, id, txHash;
                  return _regenerator.default.wrap(function _callee69$(_context69) {
                    while (1) {
                      switch (_context69.prev = _context69.next) {
                        case 0:
                          tx = _arguments15.length > 1 && _arguments15[1] !== undefined ? _arguments15[1] : config.defaultTx;

                          if (!(typeof unbondLockId === "undefined")) {
                            _context69.next = 3;
                            break;
                          }

                          throw new Error("missing argument unbondingLockId");

                        case 3:
                          id = toBN(unbondLockId);
                          _context69.next = 6;
                          return BondingManager.withdrawStake(toString(id), tx);

                        case 6:
                          txHash = _context69.sent;

                          if (!tx.returnTxHash) {
                            _context69.next = 9;
                            break;
                          }

                          return _context69.abrupt("return", txHash);

                        case 9:
                          _context69.next = 11;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 11:
                          return _context69.abrupt("return", _context69.sent);

                        case 12:
                        case "end":
                          return _context69.stop();
                      }
                    }
                  }, _callee69);
                }))();
              },

              /**
               * Withdraws earned token (Transfers a sender's delegator `bondedAmount` to their `tokenBalance`)
               * @memberof livepeer~rpc
               * @param {} [unbondlock] - an object specifying the unbondlock id, amount & withdrawRound
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {TxReceipt}
               *
               * @example
               *
               * await rpc.withdrawStakeWithUnbondLock(unbondlock)
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              withdrawStakeWithUnbondLock: function withdrawStakeWithUnbondLock(unbondlock) {
                var _arguments16 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee70() {
                  var tx, id, amount, withdrawRound, currentRound, unbondingLockId, txHash;
                  return _regenerator.default.wrap(function _callee70$(_context70) {
                    while (1) {
                      switch (_context70.prev = _context70.next) {
                        case 0:
                          tx = _arguments16.length > 1 && _arguments16[1] !== undefined ? _arguments16[1] : config.defaultTx;
                          id = unbondlock.id, amount = unbondlock.amount, withdrawRound = unbondlock.withdrawRound;
                          _context70.next = 4;
                          return rpc.getCurrentRound();

                        case 4:
                          currentRound = _context70.sent;

                          if (!(withdrawRound > currentRound)) {
                            _context70.next = 9;
                            break;
                          }

                          throw new Error("Delegator must wait through unbonding period");

                        case 9:
                          if (!(amount === "0")) {
                            _context70.next = 13;
                            break;
                          }

                          throw new Error("Delegator does not have anything to withdraw");

                        case 13:
                          if (!(amount < 0)) {
                            _context70.next = 15;
                            break;
                          }

                          throw new Error("Amount cannot be negative");

                        case 15:
                          unbondingLockId = toBN(id);
                          _context70.next = 18;
                          return BondingManager.withdrawStake(toString(unbondingLockId), tx);

                        case 18:
                          txHash = _context70.sent;

                          if (!tx.returnTxHash) {
                            _context70.next = 21;
                            break;
                          }

                          return _context70.abrupt("return", txHash);

                        case 21:
                          _context70.next = 23;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 23:
                          return _context70.abrupt("return", _context70.sent);

                        case 24:
                        case "end":
                          return _context70.stop();
                      }
                    }
                  }, _callee70);
                }))();
              },

              /**
               * Withdraws earned fees (Transfers a sender's delegator `fees` to their `ethBalance`)
               * @memberof livepeer~rpc
               * @param {TxConfig} [tx = config.defaultTx] - an object specifying the `from` and `gas` values of the transaction
               * @return {TxReceipt}
               *
               * @example
               *
               * await rpc.withdrawFees()
               * // => TxReceipt {
               * //   transactionHash: string,
               * //   transactionIndex": BN,
               * //   blockHash: string,
               * //   blockNumber: BN,
               * //   cumulativeGasUsed: BN,
               * //   gasUsed: BN,
               * //   contractAddress: string,
               * //   logs: Array<Log {
               * //     logIndex: BN,
               * //     blockNumber: BN,
               * //     blockHash: string,
               * //     transactionHash: string,
               * //     transactionIndex: string,
               * //     address: string,
               * //     data: string,
               * //     topics: Array<string>
               * //   }>
               * // }
               */
              withdrawFees: function withdrawFees() {
                var _arguments17 = arguments;
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee71() {
                  var tx, txHash;
                  return _regenerator.default.wrap(function _callee71$(_context71) {
                    while (1) {
                      switch (_context71.prev = _context71.next) {
                        case 0:
                          tx = _arguments17.length > 0 && _arguments17[0] !== undefined ? _arguments17[0] : config.defaultTx;
                          _context71.next = 3;
                          return BondingManager.withdrawFees(tx);

                        case 3:
                          txHash = _context71.sent;

                          if (!tx.returnTxHash) {
                            _context71.next = 6;
                            break;
                          }

                          return _context71.abrupt("return", txHash);

                        case 6:
                          _context71.next = 8;
                          return utils.getTxReceipt(txHash, config.eth);

                        case 8:
                          return _context71.abrupt("return", _context71.sent);

                        case 9:
                        case "end":
                          return _context71.stop();
                      }
                    }
                  }, _callee71);
                }))();
              },
              verifySnapshot: function verifySnapshot(id, proof, leafHash) {
                return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee72() {
                  return _regenerator.default.wrap(function _callee72$(_context72) {
                    while (1) {
                      switch (_context72.prev = _context72.next) {
                        case 0:
                          _context72.next = 2;
                          return MerkleSnapshot.verify(id, proof, leafHash);

                        case 2:
                          return _context72.abrupt("return", _context72.sent);

                        case 3:
                        case "end":
                          return _context72.stop();
                      }
                    }
                  }, _callee72);
                }))();
              }
            };
            return _context73.abrupt("return", {
              create: createLivepeerSDK,
              config: config,
              rpc: rpc,
              utils: utils,
              events: events,
              constants: {
                ADDRESS_PAD: ADDRESS_PAD,
                EMPTY_ADDRESS: EMPTY_ADDRESS,
                DELEGATOR_STATUS: DELEGATOR_STATUS,
                TRANSCODER_STATUS: TRANSCODER_STATUS,
                VIDEO_PROFILE_ID_SIZE: VIDEO_PROFILE_ID_SIZE,
                VIDEO_PROFILES: _video_profiles.VIDEO_PROFILES
              }
            });

          case 11:
          case "end":
            return _context73.stop();
        }
      }
    }, _callee73);
  }));
  return _createLivepeerSDK.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,