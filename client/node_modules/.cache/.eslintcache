[{"/Users/shih-yuhwang/Portfolio/Broadcaster/client/src/index.js":"1","/Users/shih-yuhwang/Portfolio/Broadcaster/client/src/App.js":"2","/Users/shih-yuhwang/Portfolio/Broadcaster/client/src/reportWebVitals.js":"3"},{"size":288,"mtime":1642549219198,"results":"4","hashOfConfig":"5"},{"size":4513,"mtime":1642549168728,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1642536232932,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ap2497",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shih-yuhwang/Portfolio/Broadcaster/client/src/index.js",[],"/Users/shih-yuhwang/Portfolio/Broadcaster/client/src/App.js",["16"],"import { useState } from \"react\";\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport broadcaster from \"../src/build/Broadcaster.json\";\nimport EthPriceFeed from \"../src/build/EthPriceFeed.json\";\nimport BTCPriceFeed from \"../src/build/BTCPriceFeed.json\";\nimport EURPriceFeed from \"../src/build/EURPriceFeed.json\";\n\n// Contract Addressses\nconst broadcasterAddress = \"0x42C5B8291442437a40732E63cDE72bC6323C42C0\";\nconst EthPriceFeedAddress = \"0x5B9E873d24479Ae61f19a0B1D4d3C2C1c7dd3c22\";\nconst BTCPriceFeedAddress = \"0xE9db6B4f63E7c074296a461964737d3A7081F6b1\";\nconst EURPriceFeedAddress = \"0x51656bD0400d00F2C5D561a2FF35E3Ad3bD992FD\";\n\nfunction App() {\n  // setting state for price updates\n  const [ethPrice, setEthPrice] = useState();\n  const [BTCPrice, setBTCPrice] = useState();\n  const [EURPrice, setEURPrice] = useState();\n\n\n  // Request account from Metamask wallet and prompt user to connect if not connect\n  // Connect to wallet provider of webpage\n  async function connect() {\n     window.ethereum.request({ method: \"eth_requestAccounts\" });\n    const provider = new ethers.providers.Web3Provider(window.etherum);\n    const signer = provider.signer();\n  }\n\n   // Get Eth price from Chainlink PriceFeed\n   async function getEth() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // Using Ethers.js to call the contract on Rinkeby Testnet\n    const contract = new ethers.Contract(EthPriceFeedAddress, EthPriceFeed.abi, provider);\n    try {\n      const data = await contract.getLatestPrice();\n      //  Convert price to readable number\n      let price = ethers.utils.formatEther(data) * 10e9;\n      //  set State to price from pricefeed\n      setEthPrice(price.toFixed(2));\n    } catch (error) {\n      console.error(\"Error\", error);\n    }\n   }\n  \n    // Get BTC price from Chainlink PriceFeed\n    async function getBTC() {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      // Using Ethers.js to call the contract on Rinkeby Testnet\n      const contract = new ethers.Contract(BTCPriceFeedAddress, BTCPriceFeed.abi, provider);\n      try {\n        const data = await contract.getLatestPrice();\n        //  Convert price to readable number\n        let price = ethers.utils.formatEther(data) * 10e9;\n        //  set State to price from pricefeed\n        setBTCPrice(price.toFixed(2));\n      } catch (error) {\n        console.error(\"Error\", error);\n      }\n    }\n  \n  // Get BTC price from Chainlink PriceFeed\n  async function getEUR() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // Using Ethers.js to call the contract on Rinkeby Testnet\n    const contract = new ethers.Contract(EURPriceFeedAddress, EURPriceFeed.abi, provider);\n    try {\n      const data = await contract.getLatestPrice();\n      //  Convert price to readable number\n      let price = ethers.utils.formatEther(data) * 10e9;\n      //  set State to price from pricefeed\n      setEURPrice(price.toFixed(2));\n    } catch (error) {\n      console.error(\"Error\", error);\n    }\n  }\n\n\n  // Function to tip broadcaster\n  async function tip() {\n    // Using Ethers.js to call the contract on Rinkeby Testnet\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // Get account from the wallet to use for transaction\n    const signer = provider.getSigner();\n    // Getting contract to access tip function\n    let contract = new ethers.Contract(broadcasterAddress, broadcaster.abi, signer);\n    try {\n      let transaction = await contract.tip();\n      await transaction.wait();\n    } catch (error) {\n      // Dipslay alert if wallet address is the owner\n      alert(\"Owners cannot tip themselves\");\n    }\n\n  }\n  \n  return (\n    <div className=\"App App-header\">\n      <header className=\"App-header\">\n        <h1>Welcome to Broadcaster</h1>\n        <button className=\"connect\" onClick={ connect }>Connect Wallet</button>\n        <div className=\"flex-container\">\n        <button onClick={ getEth() }>Eth/USD:$ { ethPrice }</button>\n        <button onClick={ getBTC() }>BTC/USD:$ { BTCPrice}</button>\n        <button onClick={ getEUR() }>EUR/USD:$ { EURPrice}</button>\n        </div>\n        <iframe\n        src=\"https://cdn.jwplayer.com/players/yPdwJR8o-qHcvMMW9.html\"\n        width=\"640\"\n        height=\"360\"\n        frameborder=\"0\"\n        scrolling=\"auto\"\n        title=\"WebDemo\"\n        allowfullscreen\n      ></iframe>\n      <button className=\"tip\" onClick={tip}>Tip</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",["17","18"],"/Users/shih-yuhwang/Portfolio/Broadcaster/client/src/reportWebVitals.js",[],{"ruleId":"19","severity":1,"message":"20","line":27,"column":11,"nodeType":"21","messageId":"22","endLine":27,"endColumn":17},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},"no-unused-vars","'signer' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-global-assign","no-unsafe-negation"]